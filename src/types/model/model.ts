/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/auth/register": {
    /** 새로운 유저를 생성합니다. */
    post: operations["AuthController_register"];
  };
  "/api/v1/auth/login": {
    /** 로그인 정보로 refresh token, access token을 발급합니다. */
    post: operations["AuthController_login"];
  };
  "/api/v1/auth/refresh": {
    /** refresh token으로 새로운 refresh token, access token을 발급합니다. */
    post: operations["AuthController_refresh"];
  };
  "/api/v1/auth/logout": {
    /** 전달된 refresh token과 해당 token에서 파생된 모든 토큰들을 무효화합니다. */
    delete: operations["AuthController_logout"];
  };
  "/api/v1/auth/withdrawal": {
    /** 유저를 삭제합니다. */
    post: operations["AuthController_withdrawal"];
  };
  "/api/v1/business-card/{businessCardUri}/exists": {
    /** 명함의 uri을 중복체크 합니다. */
    get: operations["BusinessCardController_checkUriExist"];
  };
  "/api/v1/business-card": {
    /** 유저의 모든 명함을 조회합니다. */
    get: operations["BusinessCardController_getAllBusinessCard"];
    /** 새로운 명함을 생성합니다. */
    post: operations["BusinessCardController_createBusinessCard"];
  };
  "/api/v1/business-card/{businessCardUri}": {
    /** uri에 해당하는 명함을 조회합니다. */
    get: operations["BusinessCardController_getBusinessCardByUri"];
    /** 유저의 uri에 해당하는 명함을 삭제합니다. */
    delete: operations["BusinessCardController_deleteBusinessCard"];
    /** 유저의 uri에 해당하는 명함을 수정합니다. */
    patch: operations["BusinessCardController_updateBusinessCard"];
  };
  "/api/v1/events": {
    /** 본인이 신청한 경조사 리스트를 조회합니다. */
    get: operations["EventController_getEventRequestList"];
    /** 새로운 경조사 등록을 요청합니다. 관리자가 승인하면 경조사와 관련된 멤버들에게 알림이 가고, 경조사 리스트에 추가됩니다. */
    post: operations["EventController_requestRegisterEvent"];
  };
  "/api/v1/events/{eventId}": {
    /** eventId에 해당하는 본인의 경조사 등록 신청 정보를 조회합니다. */
    get: operations["EventController_getEventRequest"];
  };
  "/api/v1/admin/events": {
    /** 맘모스를 통해 관리되고 있는 경조사 리스트를 가져옵니다. */
    get: operations["AdminEventController_getEventRequestList"];
  };
  "/api/v1/admin/events/{eventId}": {
    /** eventId에 해당하는 경조사 등록 신청 정보를 조회합니다. */
    get: operations["AdminEventController_getEventRequest"];
  };
  "/api/v1/admin/events/{eventId}/approve": {
    /**
     * 경조사를 승인합니다.
     * 승인된 경조사는 경조사 리스트에 추가되고, 경조사와 관련된 멤버들에게 승인 알림이 가게 됩니다.
     */
    patch: operations["AdminEventController_approveEvent"];
  };
  "/api/v1/files/public": {
    post: operations["FileController_uploadPublicFile"];
  };
  "/api/v1/files/user": {
    post: operations["FileController_uploadUserFile"];
  };
  "/api/v1/files/group": {
    post: operations["FileController_uploadGroupFile"];
  };
  "/api/v1/files/public/{fileUuid}": {
    get: operations["FileController_downloadPublicFile"];
  };
  "/api/v1/files/user/{fileUuid}": {
    get: operations["FileController_downloadUserFile"];
  };
  "/api/v1/files/group/{fileUuid}": {
    get: operations["FileController_downloadGroupFile"];
  };
  "/api/v1/groups": {
    /** 자신이 관리자로 속한 그룹 리스트를 가져옵니다. */
    get: operations["GroupController_getGroupList"];
    /** 자신이 관리자인 그룹을 하나 생성합니다. */
    post: operations["GroupController_createGroup"];
  };
  "/api/v1/groups/{groupId}": {
    /** groupId에 해당하는 그룹의 정보를 가져옵니다. */
    get: operations["GroupController_getGroup"];
    /** groupId에 해당하는 그룹을 삭제합니다. */
    delete: operations["GroupController_removeGroup"];
    /** groupId에 해당하는 그룹의 정보를 수정합니다. */
    patch: operations["GroupController_updateGroup"];
  };
  "/api/v1/banners": {
    /** 그룹 배너 리스트를 가져옵니다. */
    get: operations["GroupBannerController_getGroupBannerList"];
  };
  "/api/v1/members": {
    /**
     * 회원 리스트를 가져옵니다.
     * 맘모스에 로그인한 적 없는 노무사 회원은 검색이 불가능합니다.
     */
    get: operations["GroupMemberController_getGroupMemberList"];
  };
  "/api/v1/members/me": {
    /** 그룹의 본인 멤버 상세 정보를 가져옵니다. */
    get: operations["GroupMemberController_getMyGroupMember"];
  };
  "/api/v1/members/{groupMemberId}": {
    /** 회원 상세 정보를 가져옵니다. 맘모스에 로그인한 적 없는 회원은 검색이 불가능합니다. 맘모스에 로그인한 적 없는 노무사 회원을 찾고 싶다면 /api/v1/kcplaa/members/:kcplaaMemberId 를 사용하세요. */
    get: operations["GroupMemberController_getGroupMember"];
  };
  "/api/v1/admin/banners": {
    /** 그룹 배너 리스트를 가져옵니다. */
    get: operations["AdminGroupBannerController_getGroupBannerList"];
    /** 그룹 배너를 생성합니다. */
    post: operations["AdminGroupBannerController_createGroupBanner"];
  };
  "/api/v1/admin/banners/{groupBannerId}": {
    /** groupBannerId에 해당하는 그룹 배너를 가져옵니다. */
    get: operations["AdminGroupBannerController_getGroupBanner"];
    /** groupBannerId에 해당하는 그룹 배너를 삭제합니다. */
    delete: operations["AdminGroupBannerController_deleteGroupBanner"];
    /** groupBannerId에 해당하는 그룹 배너를 수정합니다. */
    patch: operations["AdminGroupBannerController_updateGroupBanner"];
  };
  "/api/v1/admin/members": {
    /** 모든 그룹 멤버 리스트를 가져옵니다. */
    get: operations["AdminGroupMemberController_getGroupMemberList"];
  };
  "/api/v1/admin/members/{groupMemberId}": {
    /** groupMemberId에 해당하는 그룹 멤버를 가져옵니다. */
    get: operations["AdminGroupMemberController_getGroupMember"];
    /** groupMemberId에 해당하는 그룹 멤버를 추방합니다. */
    delete: operations["AdminGroupMemberController_deleteGroupMember"];
    /** groupMemberId에 해당하는 그룹 멤버를 수정합니다. */
    patch: operations["AdminGroupMemberController_updateGroupMember"];
  };
  "/api/v1/admin/members/{groupMemberId}/roles": {
    /** groupMemberId에 해당하는 그룹 멤버에게 역할을 추가합니다. */
    post: operations["AdminGroupMemberController_addRolesToGroupMember"];
    /** groupMemberId에 해당하는 그룹 멤버에게서 roleIds에 해당하는 역할들을 제거합니다. */
    delete: operations["AdminGroupMemberController_removeRolesFromGroupMember"];
  };
  "/api/v1/admin/members/{groupMemberId}/roles/{roleId}": {
    /** groupMemberId에 해당하는 그룹 멤버에게서 roleId에 해당하는 역할을 제거합니다. */
    delete: operations["AdminGroupMemberController_removeRoleFromGroupMember"];
  };
  "/api/v1/admin/roles": {
    /** 그룹의 역할 리스트를 가져옵니다. */
    get: operations["AdminGroupRoleController_getGroupRoleList"];
    /** 그룹에 새로운 역할을 추가합니다. */
    post: operations["AdminGroupRoleController_addGroupRole"];
  };
  "/api/v1/admin/roles/{roleId}": {
    /** roleId에 해당하는 그룹의 역할을 가져옵니다. */
    get: operations["AdminGroupRoleController_getGroupRole"];
    /** roleId에 해당하는 그룹의 역할을 삭제합니다. 기본 역할은 삭제할 수 없습니다. */
    delete: operations["AdminGroupRoleController_removeGroupRole"];
    /** roleId에 해당하는 그룹의 역할을 수정합니다. 기본 역할은 수정할 수 없습니다. 자신이 가진 권한만을 부여할 수 있습니다. */
    patch: operations["AdminGroupRoleController_updateGroupRole"];
  };
  "/api/v1/admin/roles/{roleId}/permissions": {
    /** roleId에 해당하는 그룹의 역할에 권한을 추가합니다. */
    post: operations["AdminGroupRoleController_addPermissionsToGroupRole"];
    /** roleId에 해당하는 그룹의 역할에 권한을 제거합니다. */
    delete: operations["AdminGroupRoleController_deletePermissionsFromGroupRole"];
  };
  "/api/v1/admin/positions": {
    /** 그룹의 직위 리스트를 가져옵니다. */
    get: operations["AdminGroupPositionController_getGroupPositionList"];
    /** 그룹에 새로운 직위를 추가합니다. */
    post: operations["AdminGroupPositionController_addGroupPosition"];
  };
  "/api/v1/admin/positions/{positionId}": {
    /** positionId에 해당하는 그룹의 직위를 가져옵니다. */
    get: operations["AdminGroupPositionController_getGroupPosition"];
    /** positionId에 해당하는 그룹의 직위를 삭제합니다. 기본 직위는 삭제할 수 없습니다. */
    delete: operations["AdminGroupPositionController_removeGroupPosition"];
    /** positionId에 해당하는 그룹의 직위를 수정합니다. 기본 직위는 수정할 수 없습니다. */
    patch: operations["AdminGroupPositionController_updateGroupPosition"];
  };
  "/api/v1/admin/organizations/teams": {
    /** 그룹의 조직 리스트를 가져옵니다. */
    get: operations["AdminOrganizationTeamController_getOrganizationTeamList"];
    /** 그룹에 새로운 조직을 추가합니다. */
    post: operations["AdminOrganizationTeamController_addOrganizationTeam"];
  };
  "/api/v1/admin/organizations/teams/{teamId}": {
    /** teamId에 해당하는 그룹의 조직을 가져옵니다. */
    get: operations["AdminOrganizationTeamController_getOrganizationTeam"];
    /**
     * teamId에 해당하는 그룹의 조직을 삭제합니다. 기본 조직은 삭제할 수 없습니다.
     *  하위 조직들은 부모 조직에 속하게 됩니다.
     */
    delete: operations["AdminOrganizationTeamController_removeOrganizationTeam"];
    /** teamId에 해당하는 그룹의 조직을 수정합니다. 기본 조직은 수정할 수 없습니다. */
    patch: operations["AdminOrganizationTeamController_updateOrganizationTeam"];
  };
  "/api/v1/admin/organizations/teams/{teamId}/members": {
    /** teamId에 해당하는 조직에 멤버를 추가합니다. */
    post: operations["AdminOrganizationTeamMemberController_addGroupTeamMember"];
    /** teamId에 해당하는 조직에서 멤버를 제거합니다. */
    delete: operations["AdminOrganizationTeamMemberController_removeGroupTeamMember"];
  };
  "/api/v1/admin/organizations/members": {
    /** 그룹 구성원을 등록합니다. 새 계정을 생성하고, 해당 계정을 그룹 구성원으로 등록합니다. */
    post: operations["AdminGroupOrganizationMemberController_createOrganizationMember"];
  };
  "/api/v1/admin/organizations/members/bulk": {
    /** 그룹 구성원을 일괄 등록합니다. 새 계정을 생성하고, 해당 계정을 그룹 구성원으로 등록합니다. */
    post: operations["AdminGroupOrganizationMemberController_bulkCreateOrganizationMember"];
  };
  "/api/v1/admin/associations/teams": {
    /** 그룹의 회원 그룹 리스트를 가져옵니다. */
    get: operations["AdminAssociationTeamController_getAssociationTeamList"];
    /** 그룹에 새로운 회원 그룹을 추가합니다. */
    post: operations["AdminAssociationTeamController_addAssociationTeam"];
  };
  "/api/v1/admin/associations/teams/{teamId}": {
    /** teamId에 해당하는 그룹의 회원 그룹을 가져옵니다. */
    get: operations["AdminAssociationTeamController_getAssociationTeam"];
    /** teamId에 해당하는 그룹의 회원 그룹을 삭제합니다. 기본 회원 그룹은 삭제할 수 없습니다. */
    delete: operations["AdminAssociationTeamController_removeAssociationTeam"];
    /** teamId에 해당하는 그룹의 회원 그룹을 수정합니다. 기본 회원 그룹은 수정할 수 없습니다. */
    patch: operations["AdminAssociationTeamController_updateAssociationTeam"];
  };
  "/api/v1/admin/associations/teams/{teamId}/members": {
    /** teamId에 해당하는 회원 그룹에 멤버를 추가합니다. */
    post: operations["AdminAssociationTeamMemberController_addGroupTeamMember"];
    /** teamId에 해당하는 회원 그룹에서 멤버를 제거합니다. */
    delete: operations["AdminAssociationTeamMemberController_removeGroupTeamMember"];
  };
  "/api/v1/admin/associations/members": {
    /** 그룹에 새로운 회원을 등록합니다. */
    post: operations["AdminGroupAssociationMemberController_createAssociationMember"];
  };
  "/api/v1/admin/associations/members/bulk": {
    /** 한번에 여러 회원을 추가합니다. */
    post: operations["AdminGroupAssociationMemberController_bulkCreateAssociationMember"];
  };
  "/api/v1/health-check": {
    get: operations["IndexController_healthCheck"];
  };
  "/api/v1/kcplaa/members/me/searchable": {
    /** 노무사 회원 인명록에서 내 정보 검색 허용 여부를 설정합니다. 노무사 회원만 이용 가능합니다. */
    patch: operations["KcplaaMemberController_setSearchable"];
  };
  "/api/v1/kcplaa/members/me/sync": {
    /** 본인의 노무사 회원 정보를 동기화합니다. 기본적으로는 매일 새벽 2시마다 동기화됩니다. 노무사 회원만 이용 가능합니다. */
    patch: operations["KcplaaMemberController_syncKcplaaMemberData"];
  };
  "/api/v1/kcplaa/members": {
    /**
     * 내 정보 검색 허용으로 설정된 노무사 리스트를 가져옵니다.
     * 맘모스를 사용하지 않은 노무사는 검색 허용으로 취급됩니다.
     * 이름을 기준으로 검색합니다.
     */
    get: operations["KcplaaMemberController_getKcplaaMemberList"];
  };
  "/api/v1/kcplaa/members/{licenseNo}": {
    /** 노무사 자격증번호(licenseNo)에 해당하는 노무사의 상세 정보를 조회합니다. */
    get: operations["KcplaaMemberController_getKcplaaMemberDetail"];
  };
  "/api/v1/kcplaa/events": {
    /** 경조사 리스트를 조회합니다. */
    get: operations["KcplaaEventController_getEventList"];
  };
  "/api/v1/kcplaa/events/{kcplaaEventId}": {
    /** 노무사회에 등록된 경조사를 조회합니다. */
    get: operations["KcplaaEventController_getEvent"];
  };
  "/api/v1/admin/kcplaa/members": {
    /**
     * 노무사 리스트를 가져옵니다.
     * 맘모스를 사용하지 않은 노무사는 검색 허용으로 취급됩니다.
     * 검색어가 있다면 이름을 기준으로 검색합니다.
     */
    get: operations["AdminKcplaaMemberController_getKcplaaMemberList"];
  };
  "/api/v1/admin/kcplaa/members/sync": {
    /** 노무사 전체 회원 정보를 동기화합니다. 기본적으로는 매일 새벽 2시마다 동기화됩니다. */
    patch: operations["AdminKcplaaMemberController_refreshKcplaaData"];
  };
  "/api/v1/admin/kcplaa/members/{kcplaaMemberId}/sync": {
    /** kcplaaMemberId에 해당하는 노무사 회원 정보를 동기화합니다. 기본적으로는 매일 새벽 2시마다 동기화됩니다. */
    patch: operations["AdminKcplaaMemberController_refreshKcplaaMemberData"];
  };
  "/api/v1/notices": {
    /** 자신에게 발송된 공지사항 리스트를 가져옵니다. */
    get: operations["NoticeController_getNoticeList"];
  };
  "/api/v1/notices/{noticeId}": {
    /**
     * noticeId에 해당하는 공지사항 상세 정보를 가져옵니다.
     * 공지사항이 아직 안읽음 상태라면 읽음 상태로 변경됩니다.
     */
    get: operations["NoticeController_getNoticeDetail"];
  };
  "/api/v1/notices/{noticeId}/read-status": {
    /**
     * noticeId에 해당하는 공지사항을 안읽음 상태로 설정합니다.
     * 이미 안읽음 상태라면 아무런 동작도 하지 않습니다.
     */
    delete: operations["NoticeController_deleteNoticeReadStatus"];
  };
  "/api/v1/admin/notices/categories": {
    /** 그룹의 공지사항 카테고리 리스트를 가져옵니다. */
    get: operations["AdminNoticeCategoryController_getNoticeCategoryList"];
    /** 새로운 공지사항 카테고리를 생성합니다. */
    post: operations["AdminNoticeCategoryController_createNoticeCategory"];
  };
  "/api/v1/admin/notices/categories/{noticeCategoryId}": {
    /** noticeCategoryId에 해당하는 공지사항 카테고리 상세 정보를 가져옵니다. */
    get: operations["AdminNoticeCategoryController_getNoticeCategory"];
    /** noticeCategoryId에 해당하는 공지사항 카테고리를 삭제합니다. */
    delete: operations["AdminNoticeCategoryController_deleteNoticeCategory"];
  };
  "/api/v1/admin/notices": {
    /** 그룹의 공지사항 리스트를 가져옵니다. */
    get: operations["AdminNoticeController_getNoticeList"];
    /** 새로운 공지사항을 생성합니다. */
    post: operations["AdminNoticeController_createNotice"];
  };
  "/api/v1/admin/notices/{noticeId}": {
    /** noticeId에 해당하는 공지사항 상세 정보를 가져옵니다. */
    get: operations["AdminNoticeController_getNotice"];
    /** noticeId에 해당하는 공지사항을 삭제합니다. 삭제된 공지사항은 복구할 수 없습니다. */
    delete: operations["AdminNoticeController_deleteNotice"];
    /** noticeId에 해당하는 공지사항을 수정합니다. */
    patch: operations["AdminNoticeController_updateNotice"];
  };
  "/api/v1/notifications/categories": {
    /** 푸시 알림 카테고리 리스트를 가져옵니다. */
    get: operations["NotificationCategoryController_getNotificationCategoryList"];
  };
  "/api/v1/notifications/categories/{categoryId}/block": {
    /** 특정 푸시 알림 카테고리의 수신 여부를 설정합니다. */
    post: operations["NotificationCategoryController_blockNotificationCategory"];
  };
  "/api/v1/notifications": {
    /** 자신에게 발송된 푸시 알림 리스트를 가져옵니다. */
    get: operations["NotificationController_getNotificationList"];
  };
  "/api/v1/notifications/{notificationId}": {
    /** notificationId에 해당하는 푸시 알림 상세 정보를 가져옵니다. */
    get: operations["NotificationController_getNotificationDetail"];
  };
  "/api/v1/admin/notifications/categories": {
    /** 그룹의 푸시 알림 카테고리 리스트를 가져옵니다. */
    get: operations["AdminNotificationCategoryController_getNotificationCategoryList"];
    /** 그룹에 새로운 푸시 알림 카테고리를 생성합니다. */
    post: operations["AdminNotificationCategoryController_createNotificationCategory"];
  };
  "/api/v1/admin/notifications/categories/{categoryId}": {
    /**
     * 그룹의 푸시 알림 카테고리를 수정합니다.
     * unused가 true면 해당 카테고리가 더 이상 일반 사용자들에게 보이지 않습니다.
     */
    patch: operations["AdminNotificationCategoryController_updateNotificationCategory"];
  };
  "/api/v1/admin/notifications": {
    /**
     * 그룹에서 발송된 푸시 알림 리스트를 가져옵니다.
     * 관리자 api는 일반 사용자 api에 발송 결과가 추가로 포함됩니다.
     */
    get: operations["AdminNotificationController_getNotificationList"];
    /** 푸시 알림을 발송합니다. 발송 현황은 15분 이후 자동으로 갱신되며, 수동으로 갱신시 발송 현황이 완전히 반영되기까지는 최대 15분 정도 소요될 수 있습니다. */
    post: operations["AdminNotificationController_sendNotification"];
  };
  "/api/v2/admin/notifications": {
    /** 푸시 알림을 발송합니다. 발송 현황은 15분 이후 자동으로 갱신되며, 수동으로 갱신시 발송 현황이 완전히 반영되기까지는 최대 15분 정도 소요될 수 있습니다. */
    post: operations["AdminNotificationController_sendNotificationV2"];
  };
  "/api/v1/admin/notifications/{notificationId}": {
    /** 푸시 알림의 상세 내용, 발송 현황 등을 가져옵니다. 기본적으로는 발송 현황을 새로고침하지 않습니다. */
    get: operations["AdminNotificationController_getNotification"];
  };
  "/api/v1/admin/notifications/{notificationId}/refresh": {
    /** 푸시 알림의 발송 현황을 새로고침합니다. */
    patch: operations["AdminNotificationController_refreshPushResults"];
  };
  "/api/v1/surveys/{surveyId}/responses": {
    /** surveyId에 해당하는 설문에 제출한 응답들을 가져옵니다. */
    get: operations["SurveyResponseController_getSurveyResponseList"];
    /** surveyId에 해당하는 설문의 응답을 제출합니다. */
    post: operations["SurveyResponseController_responseToSurvey"];
  };
  "/api/v1/surveys/{surveyId}/responses/{responseId}": {
    /** surveyId에 해당하는 설문에서 내가 작성한 responseId에 해당하는 응답을 가져옵니다. */
    get: operations["SurveyResponseController_getSurveyResponse"];
    /** surveyId에 해당하는 설문에서 내가 작성한 responseId에 해당하는 응답을 수정합니다. */
    patch: operations["SurveyResponseController_updateSurveyResponse"];
  };
  "/api/v1/surveys": {
    /** 조회 가능한 설문 리스트를 가져옵니다 */
    get: operations["SurveyController_getSurveyList"];
  };
  "/api/v1/surveys/{surveyId}": {
    /** surveyId에 해당하는 설문의 상세정보를 가져옵니다. */
    get: operations["SurveyController_getSurvey"];
  };
  "/api/v1/admin/surveys/{surveyId}/responses": {
    /** surveyId에 해당하는 설문에 제출한 응답들을 가져옵니다. */
    get: operations["AdminSurveyResponseController_getSurveyResponseList"];
  };
  "/api/v1/admin/surveys/{surveyId}/responses/{responseId}": {
    /** surveyId에 해당하는 설문에서 responseId에 해당하는 응답을 가져옵니다. */
    get: operations["AdminSurveyResponseController_getSurveyResponse"];
  };
  "/api/v1/admin/surveys": {
    /** 그룹 내에서 조건에 맞는 설문 리스트를 가져옵니다. */
    get: operations["AdminSurveyController_getSurveyList"];
    /** 새로운 설문을 생성합니다. */
    post: operations["AdminSurveyController_createSurvey"];
    /** surveyIds에 해당하는 설문을 삭제합니다. 삭제한 설문은 복구할 수 없습니다. */
    delete: operations["AdminSurveyController_bulkDeleteSurvey"];
  };
  "/api/v1/admin/surveys/{surveyId}": {
    /** surveyId에 해당하는 설문의 상세정보를 가져옵니다. */
    get: operations["AdminSurveyController_getSurvey"];
    /** surveyId에 해당하는 설문을 수정합니다. 설문 문항 수정은 불가능합니다. */
    patch: operations["AdminSurveyController_updateSurvey"];
  };
  "/api/v1/admin/surveys/{surveyId}/statistics": {
    /** surveyId에 해당하는 설문의 통계를 가져옵니다. */
    get: operations["AdminSurveyController_getSurveyStatistics"];
  };
  "/api/v1/admin/surveys/{surveyId}/questions": {
    /** surveyId에 해당하는 설문에 문항을 추가합니다. */
    post: operations["AdminSurveyController_addQuestion"];
  };
  "/api/v1/admin/surveys/{surveyId}/questions/{questionId}/statistics": {
    /** surveyId에 해당하는 설문의 문항별 통계를 가져옵니다. */
    get: operations["AdminSurveyController_getSurveyQuestionStatistics"];
  };
  "/api/v1/admin/surveys/{surveyId}/questions/{questionId}": {
    /** surveyId에 해당하는 설문에서 questionId에 해당하는 문항을 삭제합니다. 문항을 삭제해도 해당 문항에 대한 설문 응답은 삭제되지 않습니다. */
    delete: operations["AdminSurveyController_deleteQuestion"];
    /** surveyId에 해당하는 설문에서 questionId에 해당하는 문항을 수정합니다. */
    patch: operations["AdminSurveyController_updateQuestion"];
  };
  "/api/v1/users/devices/{uuid}": {
    /** uuid에 해당하는 디바이스의 정보를 수정합니다. */
    patch: operations["DeviceController_update"];
  };
  "/api/v1/users/me": {
    /** 자신의 정보를 가져옵니다. */
    get: operations["UserController_getMe"];
    /** 자신의 정보를 수정합니다. */
    patch: operations["UserController_updateMe"];
  };
  "/api/v1/users/exists": {
    /** id에 해당하는 로그인 아이디를 가진 유저가 존재하는지 확인합니다. kcplaaMember property가 있으면 노무사 회원입니다. */
    get: operations["PublicUserController_checkUserExist"];
  };
  "/api/v1/video-posts": {
    /** 조회 가능한 동영상 게시글 리스트를 가져옵니다. */
    get: operations["VideoPostController_getVideoPostList"];
  };
  "/api/v1/video-posts/{videoPostId}": {
    /** videoPostId에 해당하는 동영상 게시글의 상세정보를 가져옵니다. */
    get: operations["VideoPostController_getVideoPost"];
  };
  "/api/v1/admin/video-posts": {
    /** 조회 가능한 동영상 게시글 리스트를 가져옵니다. */
    get: operations["AdminVideoPostController_getVideoPostList"];
    /** 새로운 동영상 게시글을 등록합니다 */
    post: operations["AdminVideoPostController_createVideoPost"];
    /** videoPostIds에 해당하는 동영상 게시글들을 삭제합니다. */
    delete: operations["AdminVideoPostController_bulkDeleteVideoPost"];
  };
  "/api/v1/admin/video-posts/{videoPostId}": {
    /** videoPostId에 해당하는 동영상 게시글의 상세정보를 가져옵니다. */
    get: operations["AdminVideoPostController_getVideoPost"];
    /** videoPostId에 해당하는 동영상 게시글을 삭제합니다. */
    delete: operations["AdminVideoPostController_deleteVideoPost"];
    /** videoPostId에 해당하는 동영상 게시글을 수정합니다. */
    patch: operations["AdminVideoPostController_updateVideoPost"];
  };
}

export interface components {
  schemas: {
    CreateUserDto: {
      /** @description 유저 이름 */
      name: string;
      /** @description 이메일 */
      email: string;
      /**
       * @description 로그인시 사용되는 유저 id
       * @example master@ablestor.com
       */
      id: string;
      /**
       * @description 비밀번호
       * @example asdf1234!
       */
      password: string;
    };
    LoginDto: {
      /**
       * @description 로그인하는 디바이스의 고유한 값
       * @example 08ffb934-fa38-413a-a45c-b32152a60a07
       */
      uuid: string;
      /**
       * @description 디바이스의 푸시 알림 토큰
       * @example ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]
       */
      pushToken?: string;
      /**
       * @description 디바이스 정보
       *
       * {
       * Device: {
       * isDevice: true,
       * brand: 'google',
       * manufacturer: 'Google',
       * modelName: 'Android SDK built for arm64',
       * modelId: null,
       * designName: 'emulator64_arm64',
       * productName: 'emulator64_arm64',
       * deviceYearClass: 2013,
       * totalMemory: 2096988160,
       * supportedCpuArchitectures: ['arm64-v8a'],
       * osName: 'Android',
       * osVersion: '10',
       * osBuildId: 'QSR1.210802.001',
       * osInternalBuildId: 'QSR1.210802.001',
       * osBuildFingerprint:
       * 'google/sdk_gphone64_arm64/emulator64_arm64:10/QSR1.210802.001/7603624:user/release-keys',
       * platformApiLevel: 29,
       * deviceName: null,
       * },
       * Application: {
       * androidId: '1964a5173748f4f2',
       * applicationId: 'com.ablestor.kcplaa.dev',
       * applicationName: '한국공인노무사회 (dev)',
       * nativeApplicationVersion: '1.0.0',
       * nativeBuildVersion: '1',
       * installationTime: '2022-10-07T08:12:17.410Z',
       * },
       * Updates: {
       * channel: 'dev',
       * createdAt: '2022-10-11T06:23:02.886Z',
       * isEmergencyLaunch: false,
       * releaseChannel: 'default',
       * runtimeVersion: '1.0.0',
       * updateId: '8795a74b-d4e8-480b-bd69-303c361e505a',
       * },
       * }
       */
      deviceInfo?: { [key: string]: unknown };
      /**
       * @description 디바이스 os
       * @example android
       * @enum {string}
       */
      platform: "unknown" | "android" | "ios" | "pc" | "web";
      /**
       * @description 로그인시 사용되는 유저 id
       * @example master@ablestor.com
       */
      id: string;
      /**
       * @description 비밀번호
       * @example asdf1234!
       */
      password: string;
    };
    GeneratedTokenResponse: {
      accessToken: string;
      refreshToken: string;
    };
    CreateBusinessCardDto: {
      /**
       * @description 동영상 링크
       * @example [
       *   "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
       * ]
       */
      videoLinks?: string[];
      /**
       * @description 사용자 이름
       * @example 테스트
       */
      name: string;
      /** @description 본인 전화번호 */
      hp?: string;
      /**
       * @description 소개글 / 인사글
       * @example 안녕하세요
       */
      description: string;
      /** @description 프로필 이미지 */
      profileImage?: string;
      /**
       * @description 배경 색깔
       * @default #d0d0d0
       * @example #d0d0d0
       */
      bgColor: string;
      /**
       * @description 회사 이름
       * @example 에이블스토어
       */
      companyName?: string;
      /**
       * @description 회사 주소
       * @example 서울특별시 영등포구 영등포동8가 영신로 220
       */
      companyAddress?: string;
      /**
       * @description 회사 상세 주소
       * @example 서울특별시 영등포구 영신로 220 KnK디지털타워 1808호
       */
      companyDetailAddress?: string;
      /**
       * @description 회사 전화
       * @example 010-1234-5678
       */
      companyHp?: string;
      /**
       * @description 회사 이메일
       * @example abc123@abc.com
       */
      companyEmail?: string;
      /**
       * @description 회사 팩스
       * @example 02-123-456
       */
      companyFax?: string;
      /**
       * @description 회사 홈페이지
       * @example www.abc.com
       */
      companyHomepage?: string;
    };
    BusinessCard$mZFLkyvTelC5g8XnyQrpOw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 사용자 이름 */
      name: string;
      /** @description 명함 주소 */
      uri: string;
      /** @description 개인 전화번호 */
      hp: string | null;
      /** @description 배경 색상 */
      bgColor: string;
      /** @description 사용자 프로필 이미지 */
      profileImage: string | null;
      /** @description 인사말 / 소개글 */
      description: string | null;
      /** @description 회사 이름 */
      companyName: string | null;
      /** @description 회사 주소 */
      companyAddress: string | null;
      /** @description 회사 상세 주소 */
      companyDetailAddress: string | null;
      /** @description 회사 전화번호 */
      companyHp: string | null;
      /** @description 회사 이메일 */
      companyEmail: string | null;
      /** @description 회사 팩스 번호 */
      companyFax: string | null;
      /** @description 회사 홈페이지 */
      companyHomepage: string | null;
      /** @description 동영상 링크 */
      videoLinks: string[] | null;
      /** @description 명함을 생성한 userId */
      userId: number;
    };
    List$BusinessCard$mZFLkyvTelC5g8XnyQrpOw: {
      rows: components["schemas"]["BusinessCard$mZFLkyvTelC5g8XnyQrpOw"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    UpdateBusinessCardDto: {
      /**
       * @description 동영상 링크
       * @example [
       *   "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
       * ]
       */
      videoLinks?: string[];
      /**
       * @description 사용자 이름
       * @example 테스트
       */
      name?: string;
      /** @description 본인 전화번호 */
      hp?: string;
      /**
       * @description 소개글 / 인사글
       * @example 안녕하세요
       */
      description?: string;
      /** @description 프로필 이미지 */
      profileImage?: string;
      /**
       * @description 배경 색깔
       * @default #d0d0d0
       * @example #d0d0d0
       */
      bgColor?: string;
      /**
       * @description 회사 이름
       * @example 에이블스토어
       */
      companyName?: string;
      /**
       * @description 회사 주소
       * @example 서울특별시 영등포구 영등포동8가 영신로 220
       */
      companyAddress?: string;
      /**
       * @description 회사 상세 주소
       * @example 서울특별시 영등포구 영신로 220 KnK디지털타워 1808호
       */
      companyDetailAddress?: string;
      /**
       * @description 회사 전화
       * @example 010-1234-5678
       */
      companyHp?: string;
      /**
       * @description 회사 이메일
       * @example abc123@abc.com
       */
      companyEmail?: string;
      /**
       * @description 회사 팩스
       * @example 02-123-456
       */
      companyFax?: string;
      /**
       * @description 회사 홈페이지
       * @example www.abc.com
       */
      companyHomepage?: string;
    };
    ContactValidator: {
      name: string;
      phone: string;
    };
    CreateEventDto: {
      /**
       * Format: date-time
       * @description 경조사 날짜
       */
      date: string;
      /**
       * @description 연락처 배열
       * @example [
       *   {
       *     "name": "고길동",
       *     "phone": "010-1234-5678"
       *   }
       * ]
       */
      contacts: components["schemas"]["ContactValidator"][];
      /**
       * @description 경조사 종류
       * @example wedding
       * @enum {string}
       */
      type: "wedding" | "funeral" | "opening";
      /**
       * @description 경조사 주소
       * @example 서울특별시 강남구 테헤란로 427
       */
      address: string;
      /**
       * @description 경조사 장소, 건물이나 건물 내 위치 등
       * @example 무슨무슨 건물 3층
       */
      detailAddress: string;
      /**
       * @description 경조비, 축의금이나 화환 등 경조비 지급 방식
       * @example 축의금(계좌이체)
       */
      paymentMethod: string;
      /**
       * @description 경조비 지급 계좌 정보
       * @example 신한은행 110-123-456789 고길동
       */
      paymentAccount: string;
      /**
       * @description 경조 대상자 타입
       * @example 아들
       */
      targetType: string;
      /**
       * @description 경조 대상자 이름
       * @example 고철수
       */
      targetName: string;
      /**
       * @description 경조사 본인신청인지 여부
       * @default true
       */
      requestBySelf: boolean;
      /** @description 대리 등록일 경우 대상자와의 관계. requestBySelf가 true면 비어있을 수 없음 */
      requestorRelation?: string;
      /** @description 대리 등록일 경우 대상자 이름. requestBySelf가 true면 비어있을 수 없음 */
      requestorName?: string;
      /** @description 대리 등록일 경우 대상자 연락처. requestBySelf가 true면 비어있을 수 없음 */
      requestorPhone?: string;
      /**
       * @description 비고
       * @example 장소는 3층이고, 축의금은 계좌이체로 부탁드립니다.
       */
      remarks?: string;
      /**
       * @deprecated
       * @description 연관된 노무사 id 리스트. 경조사 신청이 승인되었을 때 이 유저들도 알림 메시지를 받음.
       * @default []
       */
      kcplaaMemberIds: number[];
      /** @description 경조사에 붙일 파일 id들 */
      fileIds?: string[];
    };
    "File$0KhelIcqssJxKfi0-pQ-Mw": {
      ext: string | null;
      convertibleExt: string | null;
      /** @description 파일 이름 */
      name: string;
      /** @description 파일 mime type */
      mimeType: string;
      /** @description 파일 크기 */
      size: number;
      /** @description 변환된 파일 확장자 */
      convertedExt: string | null;
      /** @description 변환된 파일 mimeType */
      convertedMimeType: string | null;
      /** @description 변환된 파일 크기 */
      convertedSize: number | null;
      /** @description 파일 uuid, 파일은 uuid를 이름으로 저장됨 */
      uuid: string;
      /**
       * @description 파일 접근 권한 레벨
       * - public: 공개 파일, 모두 접근 가능(로그인 안해도)
       * - user: 유저 개인 파일, 해당 파일을 업로드한 유저만 접근 가능
       * - group: 그룹 파일, 해당 파일이 업로드된 그룹의 멤버들만 접근 가능
       * @enum {string}
       */
      accessLevel: "group" | "user" | "public";
      /** @description 파일을 업로드한 유저 id */
      uploaderId: number | null;
      /** @description 파일이 속한 그룹 id */
      groupId: number | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Event$2F9pRg9eqpH6BKi3qrJTtg: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 연락처 배열 */
      contacts: {
        name: string;
        phone: string;
      }[];
      /**
       * @description 승인 여부
       * @default pending
       * @enum {string}
       */
      approveStatus: "pending" | "approved" | "rejected";
      /**
       * @description 경조사 본인등록 여부. true면 본인등록
       * @default true
       */
      requestBySelf: boolean;
      /** @description 경조사가 속한 그룹 id */
      groupId: number;
      /**
       * @description 경조사 종류
       * @enum {string}
       */
      type: "wedding" | "funeral" | "opening";
      /** @description 경조사 제목 */
      title: string;
      /**
       * Format: date-time
       * @description 경조사 날짜
       */
      date: string;
      /** @description 경조사 주소 */
      address: string;
      /** @description 경조사 장소, 건물이나 건물 내 위치 등 */
      detailAddress: string;
      /** @description 경조비, 축의금이나 화환 등 경조비 지급 방식 */
      paymentMethod: string;
      /** @description 경조비 지급 계좌 정보 */
      paymentAccount: string;
      /** @description 경조 대상자 타입 */
      targetType: string;
      /** @description 경조 대상자 이름 */
      targetName: string;
      /** @description 비고 */
      remarks: string | null;
      /**
       * Format: date-time
       * @description 장례식 발인 날짜
       */
      funeralDate: string | null;
      /** @description 반려 사유 */
      rejectReason: string | null;
      /** @description 대리 등록일 경우 대상자와의 관계 */
      requestorRelation: string | null;
      /** @description 대리 등록일 경우 대상자 이름 */
      requestorName: string | null;
      /** @description 대리 등록일 경우 대상자 연락처 */
      requestorPhone: string | null;
      /** @description 노무사회 경조사 id, 승인된 경조사는 이 값이 있음 */
      kcplaaEventId: number | null;
      /** @description 경조사의 첨부파일 */
      attachedFiles: components["schemas"]["File$0KhelIcqssJxKfi0-pQ-Mw"][];
    };
    List$Event$2F9pRg9eqpH6BKi3qrJTtg: {
      rows: components["schemas"]["Event$2F9pRg9eqpH6BKi3qrJTtg"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    KcplaaOffice: {
      /** @description 사무소 이름 */
      name?: string | null;
      /** @description 사무소 우편번호 */
      zipCode?: string | null;
      /** @description 사무소 주소 */
      address?: string | null;
      /** @description 사무소 장소(상세주소) */
      detailAddress?: string | null;
      /** @description 사무소 전화번호1 */
      tel1?: string | null;
      /** @description 사무소 전화번호2 */
      tel2?: string | null;
      /** @description 사무소 전화번호3 */
      tel3?: string | null;
      /** @description 사무소 팩스 번호 */
      faxNumber?: string | null;
      /** @description 사무소 홈페이지 url */
      homepage?: string | null;
    };
    "KcplaaMember$NSy-VJnYStQvYjo8W9Fv8A": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      office: components["schemas"]["KcplaaOffice"];
      /** @description 로그인에 사용되는 아이디 */
      accountId: string;
      /**
       * @description 계정 타입. 2: 노무사, 9: 노무사회 홈페이지 관리자 계정
       * @enum {string}
       */
      type:
        | "Blocked"
        | "Normal"
        | "Company"
        | "LaborAttorney"
        | "Suspended"
        | "Admin"
        | "Master";
      /**
       * @description 회원등급. 2: 일반 회원, 9: 관리자, 나머지:몰름
       * @enum {string}
       */
      grade:
        | "NonMember"
        | "Unknown1"
        | "Normal"
        | "Unknown4"
        | "Unknown6"
        | "Suspended"
        | "Admin";
      /** @description 이름 */
      name: string;
      /** @description 유선전화번호 */
      landline: string | null;
      /** @description 휴대전화 번호 */
      phone: string | null;
      /** @description 이메일 */
      email: string | null;
      /** @description 생년월일 */
      birth: string | null;
      /** @description 프로필 이미지 */
      profileImg: string | null;
      /** @description 노무사 회원 기수 */
      licenseCb: number | null;
      /** @description 노무사 회원 자격증 번호 */
      licenseNo: number | null;
      /** @description 회비 미납 월 수 */
      outstandingMonth: number;
      /** @description 입회비 납부 여부 */
      payEntranceFee: boolean;
    };
    "User$tmXevqY4-H-GlfT-wTnWJA": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description uuid */
      uuid: string;
      /**
       * @description 한번이라도 로그인한 이력이 있는지 여부
       * @default false
       */
      loggedInBefore: boolean;
      /** @description 유저 이름 */
      name: string;
      /**
       * @description 이메일
       *
       *
       * - 애초에 로그인은 account.id로 함. account.id는 unique함
       * - 이메일과 account.id는 관련 없음
       * - *노무사회 홈페이지 멤버들은 이메일이 중복됨*
       */
      email: string | null;
      /** @description 전화번호 */
      phone: string | null;
      /** @description 계정이 종속된 그룹 id */
      belongingGroupId: number | null;
      /** @description 노무사회 홈페이지 멤버 */
      kcplaaMember:
        | components["schemas"]["KcplaaMember$NSy-VJnYStQvYjo8W9Fv8A"]
        | null;
    };
    "GroupMember$fHAmNkAPk0-687kF9K8QAA": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 유저가 속한 그룹 id */
      groupId: number;
      /**
       * @description 멤버 타입
       * @enum {string}
       */
      type: "organization" | "association";
      /** @description 그룹에 속하는 유저 id */
      userId: number;
      /** @description 그룹에서 유저가 가지는 직위 id */
      positionId: number | null;
      /** @description 그룹에 속하는 유저 */
      user: components["schemas"]["User$tmXevqY4-H-GlfT-wTnWJA"] | null;
      /** @description 경조사 신청자인지 여부, false면 경조사를 신청한 사람은 아니지만, 신청 관련 알림메시지를 같이 받는 멤버임 */
      requester: boolean | null;
      /** @description 멤버의 노무사 기수 */
      licenseCb: boolean | null;
      /** @description 멤버의 노무사 자격증 번호 */
      licenseNo: boolean | null;
    };
    "Event$XVVAi-yfwQ5XUBu7jTmzrQ": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 연락처 배열 */
      contacts: {
        name: string;
        phone: string;
      }[];
      /**
       * @description 승인 여부
       * @default pending
       * @enum {string}
       */
      approveStatus: "pending" | "approved" | "rejected";
      /**
       * @description 경조사 본인등록 여부. true면 본인등록
       * @default true
       */
      requestBySelf: boolean;
      /** @description 경조사가 속한 그룹 id */
      groupId: number;
      /**
       * @description 경조사 종류
       * @enum {string}
       */
      type: "wedding" | "funeral" | "opening";
      /** @description 경조사 제목 */
      title: string;
      /**
       * Format: date-time
       * @description 경조사 날짜
       */
      date: string;
      /** @description 경조사 주소 */
      address: string;
      /** @description 경조사 장소, 건물이나 건물 내 위치 등 */
      detailAddress: string;
      /** @description 경조비, 축의금이나 화환 등 경조비 지급 방식 */
      paymentMethod: string;
      /** @description 경조비 지급 계좌 정보 */
      paymentAccount: string;
      /** @description 경조 대상자 타입 */
      targetType: string;
      /** @description 경조 대상자 이름 */
      targetName: string;
      /** @description 비고 */
      remarks: string | null;
      /**
       * Format: date-time
       * @description 장례식 발인 날짜
       */
      funeralDate: string | null;
      /** @description 반려 사유 */
      rejectReason: string | null;
      /** @description 대리 등록일 경우 대상자와의 관계 */
      requestorRelation: string | null;
      /** @description 대리 등록일 경우 대상자 이름 */
      requestorName: string | null;
      /** @description 대리 등록일 경우 대상자 연락처 */
      requestorPhone: string | null;
      /** @description 노무사회 경조사 id, 승인된 경조사는 이 값이 있음 */
      kcplaaEventId: number | null;
      /** @description 경조사 등록 승인 알림을 받을 멤버들 */
      groupMembers: components["schemas"]["GroupMember$fHAmNkAPk0-687kF9K8QAA"][];
      /** @description 경조사의 첨부파일 */
      attachedFiles: components["schemas"]["File$0KhelIcqssJxKfi0-pQ-Mw"][];
    };
    "List$Event$XVVAi-yfwQ5XUBu7jTmzrQ": {
      rows: components["schemas"]["Event$XVVAi-yfwQ5XUBu7jTmzrQ"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    AdminApproveEventDto: {
      /** @description 승인 여부 */
      approved: boolean;
      /** @description 승인 거절 사유, approved === true면 필수값임 */
      rejectReason?: string;
    };
    CreateGroupDto: {
      /** @description 그룹 이름 */
      name: string;
      /** @description 그룹 도메인. 문자나 숫자만 가능. 발급형 계정의 id 등에 사용됨 */
      domain?: string;
    };
    Group$mZFLkyvTelC5g8XnyQrpOw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 그룹의 도메인, 없으면 기본값으로 그룹의 id가 사용된다 */
      domain: string | null;
      /** @description 그룹 이름 */
      name: string;
      /** @description 그룹을 생성한 유저 id */
      creatorId: number;
    };
    List$Group$mZFLkyvTelC5g8XnyQrpOw: {
      rows: components["schemas"]["Group$mZFLkyvTelC5g8XnyQrpOw"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    UpdateGroupDto: {
      /** @description 그룹 이름 */
      name?: string;
    };
    GroupBanner$KYn23EnQvRAfAL0lTTpJGw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 기본값인지 여부, 기본값이면 삭제/수정 불가능
       * @default false
       */
      default: boolean;
      /** @description 배너기 속한 그룹 id */
      groupId: number;
      /** @description 배너 이미지 경로 */
      image: string;
      /** @description 배너 이미지 설명 */
      imageAlt: string;
      /** @description 배너 클릭시 연결될 링크 */
      link: string;
      /**
       * Format: date-time
       * @description 배너 개시 시작일. 있으면 해당 날짜부터 배너가 개시되고, 없으면 배너가 보이지 않음
       */
      startAt: string | null;
      /**
       * Format: date-time
       * @description 배너 개시 종료일. 있으면 해당 날짜까지 배너가 게시되고 이후에 내려감. 없으면 배너가 영원히 게시됨
       */
      endAt: string | null;
    };
    "KcplaaMember$0KhelIcqssJxKfi0-pQ-Mw": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      office: components["schemas"]["KcplaaOffice"];
      /** @description 로그인에 사용되는 아이디 */
      accountId: string;
      /**
       * @description 계정 타입. 2: 노무사, 9: 노무사회 홈페이지 관리자 계정
       * @enum {string}
       */
      type:
        | "Blocked"
        | "Normal"
        | "Company"
        | "LaborAttorney"
        | "Suspended"
        | "Admin"
        | "Master";
      /**
       * @description 회원등급. 2: 일반 회원, 9: 관리자, 나머지:몰름
       * @enum {string}
       */
      grade:
        | "NonMember"
        | "Unknown1"
        | "Normal"
        | "Unknown4"
        | "Unknown6"
        | "Suspended"
        | "Admin";
      /** @description 이름 */
      name: string;
      /** @description 유선전화번호 */
      landline: string | null;
      /** @description 휴대전화 번호 */
      phone: string | null;
      /** @description 이메일 */
      email: string | null;
      /** @description 생년월일 */
      birth: string | null;
      /** @description 프로필 이미지 */
      profileImg: string | null;
      /** @description 노무사 회원 기수 */
      licenseCb: number | null;
      /** @description 노무사 회원 자격증 번호 */
      licenseNo: number | null;
      /** @description 회비 미납 월 수 */
      outstandingMonth: number;
      /** @description 입회비 납부 여부 */
      payEntranceFee: boolean;
    };
    User$f5rkpYUserj4n5xiqriPuw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description uuid */
      uuid: string;
      /**
       * @description 한번이라도 로그인한 이력이 있는지 여부
       * @default false
       */
      loggedInBefore: boolean;
      /** @description 유저 이름 */
      name: string;
      /**
       * @description 이메일
       *
       *
       * - 애초에 로그인은 account.id로 함. account.id는 unique함
       * - 이메일과 account.id는 관련 없음
       * - *노무사회 홈페이지 멤버들은 이메일이 중복됨*
       */
      email: string | null;
      /** @description 전화번호 */
      phone: string | null;
      /** @description 계정이 종속된 그룹 id */
      belongingGroupId: number | null;
      /** @description 노무사회 홈페이지 멤버 */
      kcplaaMember:
        | components["schemas"]["KcplaaMember$0KhelIcqssJxKfi0-pQ-Mw"]
        | null;
    };
    "GroupMember$--k8TVEdxcxP8YRvCJm06g": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 유저가 속한 그룹 id */
      groupId: number;
      /**
       * @description 멤버 타입
       * @enum {string}
       */
      type: "organization" | "association";
      /** @description 그룹에 속하는 유저 id */
      userId: number;
      /** @description 그룹에서 유저가 가지는 직위 id */
      positionId: number | null;
      /** @description 그룹에 속하는 유저 */
      user: components["schemas"]["User$f5rkpYUserj4n5xiqriPuw"] | null;
    };
    "List$GroupMember$--k8TVEdxcxP8YRvCJm06g": {
      rows: components["schemas"]["GroupMember$--k8TVEdxcxP8YRvCJm06g"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    "KcplaaMemberSearchable$0KhelIcqssJxKfi0-pQ-Mw": {
      /**
       * @description 노무사 회원 인명록 검색 허용 여부
       * @default true
       */
      searchable: boolean;
      /** @description 노무사 회원 인명록 검색시 제외될 필드 리스트 */
      omittedFields: ("profileImage" | "email" | "phone" | "workplaces")[];
    };
    KcplaaMember$1YYxKtMKdQIrcxeqS9gH3w: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      office: components["schemas"]["KcplaaOffice"];
      /** @description 로그인에 사용되는 아이디 */
      accountId: string;
      /**
       * @description 계정 타입. 2: 노무사, 9: 노무사회 홈페이지 관리자 계정
       * @enum {string}
       */
      type:
        | "Blocked"
        | "Normal"
        | "Company"
        | "LaborAttorney"
        | "Suspended"
        | "Admin"
        | "Master";
      /**
       * @description 회원등급. 2: 일반 회원, 9: 관리자, 나머지:몰름
       * @enum {string}
       */
      grade:
        | "NonMember"
        | "Unknown1"
        | "Normal"
        | "Unknown4"
        | "Unknown6"
        | "Suspended"
        | "Admin";
      /** @description 이름 */
      name: string;
      /** @description 유선전화번호 */
      landline: string | null;
      /** @description 휴대전화 번호 */
      phone: string | null;
      /** @description 이메일 */
      email: string | null;
      /** @description 생년월일 */
      birth: string | null;
      /** @description 프로필 이미지 */
      profileImg: string | null;
      /** @description 노무사 회원 기수 */
      licenseCb: number | null;
      /** @description 노무사 회원 자격증 번호 */
      licenseNo: number | null;
      /** @description 회비 미납 월 수 */
      outstandingMonth: number;
      /** @description 입회비 납부 여부 */
      payEntranceFee: boolean;
      /** @description 노무사 회원 인명록 검색 허용 여부 설정 */
      kcplaaMemberSearchable:
        | components["schemas"]["KcplaaMemberSearchable$0KhelIcqssJxKfi0-pQ-Mw"]
        | null;
      /** @description 아이레이버 로그인 링크 */
      iLaborLink: string;
      /** @description 이러닝 로그인 링크 */
      eLearningLink: string;
    };
    "User$zN-Z7hWW1IRv4XqN0q22_g": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description uuid */
      uuid: string;
      /**
       * @description 한번이라도 로그인한 이력이 있는지 여부
       * @default false
       */
      loggedInBefore: boolean;
      /** @description 유저 이름 */
      name: string;
      /**
       * @description 이메일
       *
       *
       * - 애초에 로그인은 account.id로 함. account.id는 unique함
       * - 이메일과 account.id는 관련 없음
       * - *노무사회 홈페이지 멤버들은 이메일이 중복됨*
       */
      email: string | null;
      /** @description 전화번호 */
      phone: string | null;
      /** @description 계정이 종속된 그룹 id */
      belongingGroupId: number | null;
      /** @description 노무사회 홈페이지 멤버 */
      kcplaaMember:
        | components["schemas"]["KcplaaMember$1YYxKtMKdQIrcxeqS9gH3w"]
        | null;
    };
    "GroupMember$hpumE_UrjujD3-1eeNgw9Q": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 유저가 속한 그룹 id */
      groupId: number;
      /**
       * @description 멤버 타입
       * @enum {string}
       */
      type: "organization" | "association";
      /** @description 그룹에 속하는 유저 id */
      userId: number;
      /** @description 그룹에서 유저가 가지는 직위 id */
      positionId: number | null;
      /** @description 그룹에 속하는 유저 */
      user: components["schemas"]["User$zN-Z7hWW1IRv4XqN0q22_g"] | null;
    };
    CreateGroupBannerDto: {
      /** @description 배너 이미지 경로 */
      image: string;
      /** @description 배너 이미지 설명 */
      imageAlt: string;
      /** @description 배너 클릭시 연결될 링크 */
      link: string;
      /**
       * Format: date-time
       * @description 배너 개시 시작일. 있으면 해당 날짜부터 배너가 개시되고, 없으면 배너가 보이지 않음
       */
      startAt?: string;
      /**
       * Format: date-time
       * @description 배너 개시 종료일. 있으면 해당 날짜까지 배너가 게시되고 이후에 내려감. 없으면 배너가 영원히 게시됨
       */
      endAt?: string;
    };
    GroupBanner$mZFLkyvTelC5g8XnyQrpOw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      visible: boolean | null;
      /**
       * @description 기본값인지 여부, 기본값이면 삭제/수정 불가능
       * @default false
       */
      default: boolean;
      /** @description 배너기 속한 그룹 id */
      groupId: number;
      /** @description 배너 이미지 경로 */
      image: string;
      /** @description 배너 이미지 설명 */
      imageAlt: string;
      /** @description 배너 클릭시 연결될 링크 */
      link: string;
      /**
       * Format: date-time
       * @description 배너 개시 시작일. 있으면 해당 날짜부터 배너가 개시되고, 없으면 배너가 보이지 않음
       */
      startAt: string | null;
      /**
       * Format: date-time
       * @description 배너 개시 종료일. 있으면 해당 날짜까지 배너가 게시되고 이후에 내려감. 없으면 배너가 영원히 게시됨
       */
      endAt: string | null;
    };
    List$GroupBanner$mZFLkyvTelC5g8XnyQrpOw: {
      rows: components["schemas"]["GroupBanner$mZFLkyvTelC5g8XnyQrpOw"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    UpdateGroupBannerDto: {
      /** @description 배너 이미지 경로 */
      image?: string;
      /** @description 배너 이미지 설명 */
      imageAlt?: string;
      /** @description 배너 클릭시 연결될 링크 */
      link?: string;
      /**
       * Format: date-time
       * @description 배너 개시 시작일. 있으면 해당 날짜부터 배너가 개시되고, 없으면 배너가 보이지 않음
       */
      startAt?: string;
      /**
       * Format: date-time
       * @description 배너 개시 종료일. 있으면 해당 날짜까지 배너가 게시되고 이후에 내려감. 없으면 배너가 영원히 게시됨
       */
      endAt?: string;
    };
    "Device$0KhelIcqssJxKfi0-pQ-Mw": {
      /**
       * @description 테스트 기기인지 여부
       * @default false
       */
      testDevice: boolean;
      /** @description 클라이언트 기기 uuid */
      uuid: string;
      /** @description 클라이언트 기기 별칭 */
      alias: string | null;
      /**
       * @description 클라이언트 기기 타입
       * @default unknown
       */
      platform: { [key: string]: unknown };
      /** @description 클라이언트 기기의 푸시 알림 토큰 */
      pushToken: string | null;
      /** @description 클라이언트 기기 정보 */
      deviceInfo: { [key: string]: unknown } | null;
      /** @description 기기를 소유한 사용자 id */
      userId: number | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    User$jZMn5zhSSRMAuuq5wylTsw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description uuid */
      uuid: string;
      /**
       * @description 한번이라도 로그인한 이력이 있는지 여부
       * @default false
       */
      loggedInBefore: boolean;
      /** @description 유저 이름 */
      name: string;
      /**
       * @description 이메일
       *
       *
       * - 애초에 로그인은 account.id로 함. account.id는 unique함
       * - 이메일과 account.id는 관련 없음
       * - *노무사회 홈페이지 멤버들은 이메일이 중복됨*
       */
      email: string | null;
      /** @description 전화번호 */
      phone: string | null;
      /** @description 계정이 종속된 그룹 id */
      belongingGroupId: number | null;
      /**
       * Format: date-time
       * @description 유저가 마지막으로 로그인한 시간
       */
      lastActivatedAt: string | null;
      /** @description 유저의 계정 id */
      accountId: string | null;
      /** @description 유저의 기기들 */
      devices: components["schemas"]["Device$0KhelIcqssJxKfi0-pQ-Mw"][];
    };
    "NotificationCategory$0KhelIcqssJxKfi0-pQ-Mw": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 기본값인지 여부, 기본값이면 삭제/비활성화 불가
       * @default false
       */
      default: boolean;
      /**
       * @description 사용중인지 여부
       * @default false
       */
      unused: boolean;
      /** @description 알림 카테고리가 속한 그룹 id */
      groupId: number;
      /** @description 알림 카테고리 이름 */
      name: string;
      /**
       * @description 알림메시지 타입. system: 앱에서 보내는 시스템 알림, user: 관리자가 보내는 일반 알림
       * @enum {string}
       */
      type: "system" | "user";
    };
    "GroupPosition$0KhelIcqssJxKfi0-pQ-Mw": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 기본값인지 여부, 기본값이면 삭제 불가능
       * @default false
       */
      default: boolean;
      /** @description 직위이 속한 그룹 id */
      groupId: number;
      /** @description 직위 이름 */
      name: string;
    };
    "GroupTeam$0KhelIcqssJxKfi0-pQ-Mw": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 기본값인지 여부, 기본값이면 삭제 불가능
       * @default false
       */
      default: boolean;
      /** @description 팀이 속한 그룹 id */
      groupId: number;
      /** @description 팀 이름 */
      name: string;
      /** @enum {string} */
      type: "organization" | "association";
      /** @description 부모 팀 id, 없으면 최상위 팀, 부모 팀이 삭제되면 이 팀도 삭제됨 */
      parentId: number | null;
    };
    "Permission$0KhelIcqssJxKfi0-pQ-Mw": {
      id: number;
      /**
       * @description 권한 이름
       * @enum {string}
       */
      name:
        | "master"
        | "admin"
        | "pushNotification"
        | "notice"
        | "survey"
        | "videoPost"
        | "event"
        | "member"
        | "organization"
        | "association"
        | "position"
        | "role"
        | "team"
        | "tag";
    };
    GroupRole$n_9rpZ6GuUnb8bDIzW2ASA: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 기본값인지 여부, 기본값이면 삭제 불가능
       * @default false
       */
      default: boolean;
      /** @description 역할이 속한 그룹 id */
      groupId: number;
      /** @description 역할 이름 */
      name: string;
      /** @description 역할이 가지는 권한들 */
      permissions: components["schemas"]["Permission$0KhelIcqssJxKfi0-pQ-Mw"][];
    };
    "Tag$0KhelIcqssJxKfi0-pQ-Mw": {
      /** @description 태그 키 */
      key: string;
    };
    "GroupMember$ibzP2MEdd82eZLNY-2zkUQ": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 유저가 속한 그룹 id */
      groupId: number;
      /**
       * @description 멤버 타입
       * @enum {string}
       */
      type: "organization" | "association";
      /** @description 그룹에 속하는 유저 id */
      userId: number;
      /** @description 그룹에서 유저가 가지는 직위 id */
      positionId: number | null;
      /** @description 그룹에 속하는 유저 */
      user: components["schemas"]["User$jZMn5zhSSRMAuuq5wylTsw"] | null;
      /** @description 그룹에서 유저가 수신 거부한 알림 카테고리들 */
      blockedCategories: components["schemas"]["NotificationCategory$0KhelIcqssJxKfi0-pQ-Mw"][];
      /** @description 그룹에서 유저가 가지는 직위 */
      position:
        | components["schemas"]["GroupPosition$0KhelIcqssJxKfi0-pQ-Mw"]
        | null;
      /** @description 그룹에서 유저가 속한 팀 */
      teams: components["schemas"]["GroupTeam$0KhelIcqssJxKfi0-pQ-Mw"][];
      /** @description 그룹에서 유저가 가지는 역할들 */
      roles: components["schemas"]["GroupRole$n_9rpZ6GuUnb8bDIzW2ASA"][];
      /** @description 그룹에서 유저가 가지는 태그들 */
      tags: components["schemas"]["Tag$0KhelIcqssJxKfi0-pQ-Mw"][];
    };
    "List$GroupMember$ibzP2MEdd82eZLNY-2zkUQ": {
      rows: components["schemas"]["GroupMember$ibzP2MEdd82eZLNY-2zkUQ"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    UpdateGroupOrganizationMemberDto: {
      /** @description 그룹 멤버가 속할 팀 id */
      teamId?: number;
      /** @description 그룹 멤버가 가질 직위 id */
      positionId?: number;
      /** @description 그룹 멤버에게 부여될 역할 id 목록 */
      roleIds?: number[];
    };
    CreateGroupRoleDto: {
      /** @description 그룹 역할 이름 */
      name: string;
      /** @description 역할에 부여될 권한 이름 */
      permissions?: (
        | "master"
        | "admin"
        | "pushNotification"
        | "notice"
        | "survey"
        | "videoPost"
        | "event"
        | "member"
        | "organization"
        | "association"
        | "position"
        | "role"
        | "team"
        | "tag"
      )[];
    };
    GroupRole$l332XqYp873s5b6FWQXPSA: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 기본값인지 여부, 기본값이면 삭제 불가능
       * @default false
       */
      default: boolean;
      /** @description 역할이 속한 그룹 id */
      groupId: number;
      /** @description 역할 이름 */
      name: string;
      /** @description 역할이 가지는 권한들 */
      permissions: components["schemas"]["Permission$0KhelIcqssJxKfi0-pQ-Mw"][];
    };
    List$GroupRole$l332XqYp873s5b6FWQXPSA: {
      rows: components["schemas"]["GroupRole$l332XqYp873s5b6FWQXPSA"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    UpdateGroupRoleDto: { [key: string]: unknown };
    AddGroupRolePermissionDto: {
      /** @description 추가할 권한 이름, 자신이 가지지 */
      permissions: (
        | "master"
        | "admin"
        | "pushNotification"
        | "notice"
        | "survey"
        | "videoPost"
        | "event"
        | "member"
        | "organization"
        | "association"
        | "position"
        | "role"
        | "team"
        | "tag"
      )[];
    };
    RemoveGroupRolePermissionDto: {
      /** @description 제거할 권한 이름 */
      permissions: (
        | "master"
        | "admin"
        | "pushNotification"
        | "notice"
        | "survey"
        | "videoPost"
        | "event"
        | "member"
        | "organization"
        | "association"
        | "position"
        | "role"
        | "team"
        | "tag"
      )[];
    };
    CreateGroupPositionDto: {
      /** @description 그룹 역할 이름 */
      name: string;
    };
    GroupPosition$mZFLkyvTelC5g8XnyQrpOw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 기본값인지 여부, 기본값이면 삭제 불가능
       * @default false
       */
      default: boolean;
      /** @description 직위이 속한 그룹 id */
      groupId: number;
      /** @description 직위 이름 */
      name: string;
    };
    List$GroupPosition$mZFLkyvTelC5g8XnyQrpOw: {
      rows: components["schemas"]["GroupPosition$mZFLkyvTelC5g8XnyQrpOw"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    UpdateGroupPositionDto: {
      /** @description 그룹 역할 이름 */
      name?: string;
    };
    CreateOrganizationTeamDto: {
      name: string;
      /** @description 부모 팀 id, 없으면 최상위 팀 id */
      parentId?: number;
    };
    GroupTeam$3v0y0DsS7WhHYRVd62tf0Q: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 기본값인지 여부, 기본값이면 삭제 불가능
       * @default false
       */
      default: boolean;
      /** @description 팀이 속한 그룹 id */
      groupId: number;
      /** @description 팀 이름 */
      name: string;
      /** @enum {string} */
      type: "organization" | "association";
      /** @description 부모 팀 id, 없으면 최상위 팀, 부모 팀이 삭제되면 이 팀도 삭제됨 */
      parentId: number | null;
      allMemberCount: number | null;
    };
    List$GroupTeam$3v0y0DsS7WhHYRVd62tf0Q: {
      rows: components["schemas"]["GroupTeam$3v0y0DsS7WhHYRVd62tf0Q"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    "Account$0KhelIcqssJxKfi0-pQ-Mw": {
      /** @description 로그인시 사용될 계정 아이디 */
      id: string;
    };
    "User$vT-VzcUUkwIJ-KBQ38OCqQ": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description uuid */
      uuid: string;
      /**
       * @description 한번이라도 로그인한 이력이 있는지 여부
       * @default false
       */
      loggedInBefore: boolean;
      /** @description 유저 이름 */
      name: string;
      /**
       * @description 이메일
       *
       *
       * - 애초에 로그인은 account.id로 함. account.id는 unique함
       * - 이메일과 account.id는 관련 없음
       * - *노무사회 홈페이지 멤버들은 이메일이 중복됨*
       */
      email: string | null;
      /** @description 전화번호 */
      phone: string | null;
      /** @description 계정이 종속된 그룹 id */
      belongingGroupId: number | null;
      /** @description 유저 계정 */
      account: components["schemas"]["Account$0KhelIcqssJxKfi0-pQ-Mw"] | null;
    };
    "GroupRole$0KhelIcqssJxKfi0-pQ-Mw": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 기본값인지 여부, 기본값이면 삭제 불가능
       * @default false
       */
      default: boolean;
      /** @description 역할이 속한 그룹 id */
      groupId: number;
      /** @description 역할 이름 */
      name: string;
    };
    GroupMember$4mZYemgijBbqCAPcEnpAPw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 유저가 속한 그룹 id */
      groupId: number;
      /**
       * @description 멤버 타입
       * @enum {string}
       */
      type: "organization" | "association";
      /** @description 그룹에 속하는 유저 id */
      userId: number;
      /** @description 그룹에서 유저가 가지는 직위 id */
      positionId: number | null;
      /** @description 그룹에 속하는 유저 */
      user: components["schemas"]["User$vT-VzcUUkwIJ-KBQ38OCqQ"] | null;
      /** @description 그룹에서 유저가 가지는 역할들 */
      roles: components["schemas"]["GroupRole$0KhelIcqssJxKfi0-pQ-Mw"][];
      /** @description 그룹에서 유저가 가지는 직위 */
      position:
        | components["schemas"]["GroupPosition$0KhelIcqssJxKfi0-pQ-Mw"]
        | null;
    };
    GroupTeam$DnIbOsRmhaLh37gBU9m5BA: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 기본값인지 여부, 기본값이면 삭제 불가능
       * @default false
       */
      default: boolean;
      /** @description 팀이 속한 그룹 id */
      groupId: number;
      /** @description 팀 이름 */
      name: string;
      /** @enum {string} */
      type: "organization" | "association";
      /** @description 부모 팀 id, 없으면 최상위 팀, 부모 팀이 삭제되면 이 팀도 삭제됨 */
      parentId: number | null;
      /** @description 팀에 속한 유저들 */
      groupMembers: components["schemas"]["GroupMember$4mZYemgijBbqCAPcEnpAPw"][];
    };
    UpdateOrganizationTeamDto: {
      name?: string;
    };
    AddMembersToOrganizationTeamDto: {
      /** @description 그룹 팀에 추가될 멤버 id 목록 */
      memberIds: number[];
    };
    RemoveMembersFromTeamDto: {
      /** @description 그룹 팀에서 제거될 멤버 id 목록 */
      memberIds: number[];
    };
    CreateGroupOrganizationMemberDto: {
      name: string;
      email?: string;
      accountId: string;
      accountPassword: string;
      /** @description 그룹 멤버가 속할 팀 id */
      teamId?: number;
      /** @description 그룹 멤버가 가질 직위 id */
      positionId?: number;
      /** @description 그룹 멤버에게 부여될 역할 id 목록 */
      roleIds?: number[];
    };
    CreateGroupOrganizationMemberResponse: {
      groupMemberId: number;
      accountId: string;
    };
    BulkCreateGroupOrganizationMemberDto: {
      groupMembers: components["schemas"]["CreateGroupOrganizationMemberDto"][];
    };
    BulkCreateGroupOrganizationMemberResponse: {
      users: components["schemas"]["CreateGroupOrganizationMemberResponse"][];
    };
    CreateAssociationTeamDto: {
      name: string;
    };
    "GroupTeam$bAWYL_-5OVRyU0WyEV3CXQ": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 기본값인지 여부, 기본값이면 삭제 불가능
       * @default false
       */
      default: boolean;
      /** @description 팀이 속한 그룹 id */
      groupId: number;
      /** @description 팀 이름 */
      name: string;
      /** @enum {string} */
      type: "organization" | "association";
      allMemberCount: number | null;
    };
    "List$GroupTeam$bAWYL_-5OVRyU0WyEV3CXQ": {
      rows: components["schemas"]["GroupTeam$bAWYL_-5OVRyU0WyEV3CXQ"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    GroupMember$6aqHJrdTbg7N_exIlOtktw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 유저가 속한 그룹 id */
      groupId: number;
      /**
       * @description 멤버 타입
       * @enum {string}
       */
      type: "organization" | "association";
      /** @description 그룹에 속하는 유저 id */
      userId: number;
      /** @description 그룹에서 유저가 가지는 직위 id */
      positionId: number | null;
      /** @description 그룹에 속하는 유저 */
      user: components["schemas"]["User$vT-VzcUUkwIJ-KBQ38OCqQ"] | null;
    };
    GroupTeam$Pwfmxii4q5NdRDYj9WD7Qw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 기본값인지 여부, 기본값이면 삭제 불가능
       * @default false
       */
      default: boolean;
      /** @description 팀이 속한 그룹 id */
      groupId: number;
      /** @description 팀 이름 */
      name: string;
      /** @enum {string} */
      type: "organization" | "association";
      /** @description 팀에 속한 유저들 */
      groupMembers: components["schemas"]["GroupMember$6aqHJrdTbg7N_exIlOtktw"][];
    };
    UpdateAssociationTeamDto: {
      name?: string;
    };
    AddMembersToAssociationTeamDto: {
      /** @description 그룹 팀에 추가될 멤버 id 목록 */
      memberIds?: number[];
      kcplaaMemberIds?: number[];
    };
    CreateGroupAssociationMemberDto: {
      /** @description 그룹 멤버가 될 유저 id */
      userId: number;
    };
    BulkCreateAssociationGroupMemberDto: {
      groupMembers: components["schemas"]["CreateGroupAssociationMemberDto"][];
    };
    UpdateKcplaaMemberSearchableDto: {
      /** @description 멤버 검색 가능 여부 */
      searchable?: boolean;
      omittedFields?: ("profileImage" | "email" | "phone" | "workplaces")[];
    };
    KcplaaCsMemberView$mZFLkyvTelC5g8XnyQrpOw: {
      /** @description 등록번호 */
      licenseNo: number;
      /** @description 이름 */
      name: string;
      /** @description 회원 구분. 일반회원, 개업회원 등이 있음 */
      grade: string;
      /** @description 소속 지회 */
      subAssociation: string | null;
      /** @description 기수. null이면 경력 노무사 */
      licenseCb: number | null;
      /** @description 휴대전화 번호 */
      phone: string | null;
      /** @description 이메일 */
      email: string | null;
      /** @description 사무소 이름 */
      officeName: string | null;
      /** @description 사무소 주소. 상세주소 포함 */
      officeAddress: string | null;
      /** @description 사무소 전화번호1 */
      officeTel1: string | null;
      /** @description 사무소 우편번호 */
      officeZipCode: string | null;
    };
    List$KcplaaCsMemberView$mZFLkyvTelC5g8XnyQrpOw: {
      rows: components["schemas"]["KcplaaCsMemberView$mZFLkyvTelC5g8XnyQrpOw"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    Event$QIxtfcnO7Z8cBRuL7ctzsQ: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 연락처 배열 */
      contacts: {
        name: string;
        phone: string;
      }[];
      /**
       * @description 승인 여부
       * @default pending
       * @enum {string}
       */
      approveStatus: "pending" | "approved" | "rejected";
      /**
       * @description 경조사 본인등록 여부. true면 본인등록
       * @default true
       */
      requestBySelf: boolean;
      /** @description 경조사가 속한 그룹 id */
      groupId: number;
      /**
       * @description 경조사 종류
       * @enum {string}
       */
      type: "wedding" | "funeral" | "opening";
      /** @description 경조사 제목 */
      title: string;
      /**
       * Format: date-time
       * @description 경조사 날짜
       */
      date: string;
      /** @description 경조사 주소 */
      address: string;
      /** @description 경조사 장소, 건물이나 건물 내 위치 등 */
      detailAddress: string;
      /** @description 경조비, 축의금이나 화환 등 경조비 지급 방식 */
      paymentMethod: string;
      /** @description 경조비 지급 계좌 정보 */
      paymentAccount: string;
      /** @description 경조 대상자 타입 */
      targetType: string;
      /** @description 경조 대상자 이름 */
      targetName: string;
      /** @description 비고 */
      remarks: string | null;
      /**
       * Format: date-time
       * @description 장례식 발인 날짜
       */
      funeralDate: string | null;
      /** @description 반려 사유 */
      rejectReason: string | null;
      /** @description 대리 등록일 경우 대상자와의 관계 */
      requestorRelation: string | null;
      /** @description 대리 등록일 경우 대상자 이름 */
      requestorName: string | null;
      /** @description 대리 등록일 경우 대상자 연락처 */
      requestorPhone: string | null;
      /** @description 노무사회 경조사 id, 승인된 경조사는 이 값이 있음 */
      kcplaaEventId: number | null;
      /** @description 경조사의 첨부파일 */
      attachedFiles: components["schemas"]["File$0KhelIcqssJxKfi0-pQ-Mw"][];
    };
    KcplaaEvent$Lhkz8RKRbSF25DN1lVppBg: {
      /** @description 경조사 id */
      id: number;
      /**
       * Format: date-time
       * @description 경조사 등록일
       */
      createdAt: string;
      /** @description mommoss db에 저장된 경조사 데이터 */
      event: components["schemas"]["Event$QIxtfcnO7Z8cBRuL7ctzsQ"] | null;
      /** @description 경조사 제목 */
      title: string | null;
      /** @description 경조사 날짜, yyyy-mm-dd 형식 */
      date: string | null;
      /** @description 경조사 시간, 형식 없음 */
      time: string | null;
      /** @description 경조사 장소, 건물 내 장소 등임 */
      place: string | null;
    };
    GroupMember$5G1YraTsY2bFt1cgTf4zbw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 유저가 속한 그룹 id */
      groupId: number;
      /**
       * @description 멤버 타입
       * @enum {string}
       */
      type: "organization" | "association";
      /** @description 그룹에 속하는 유저 id */
      userId: number;
      /** @description 그룹에서 유저가 가지는 직위 id */
      positionId: number | null;
      /** @description 그룹에서 유저가 수신 거부한 알림 카테고리들 */
      blockedCategories: components["schemas"]["NotificationCategory$0KhelIcqssJxKfi0-pQ-Mw"][];
      /** @description 그룹에서 유저가 속한 팀 */
      teams: components["schemas"]["GroupTeam$0KhelIcqssJxKfi0-pQ-Mw"][];
      /** @description 그룹에서 유저가 가지는 태그들 */
      tags: components["schemas"]["Tag$0KhelIcqssJxKfi0-pQ-Mw"][];
    };
    User$6PObkChBrJ5v9950AfAoDw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description uuid */
      uuid: string;
      /**
       * @description 한번이라도 로그인한 이력이 있는지 여부
       * @default false
       */
      loggedInBefore: boolean;
      /** @description 유저 이름 */
      name: string;
      /**
       * @description 이메일
       *
       *
       * - 애초에 로그인은 account.id로 함. account.id는 unique함
       * - 이메일과 account.id는 관련 없음
       * - *노무사회 홈페이지 멤버들은 이메일이 중복됨*
       */
      email: string | null;
      /** @description 전화번호 */
      phone: string | null;
      /** @description 계정이 종속된 그룹 id */
      belongingGroupId: number | null;
      /**
       * Format: date-time
       * @description 유저가 마지막으로 로그인한 시간
       */
      lastActivatedAt: string | null;
      /** @description 유저의 계정 id */
      accountId: string | null;
      /** @description 유저가 속한 그룹들에서의 그룹 멤버 */
      groupMembers: components["schemas"]["GroupMember$5G1YraTsY2bFt1cgTf4zbw"][];
    };
    KcplaaMember$n1qL2LgK1wWloKVbny6I_Q: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      office: components["schemas"]["KcplaaOffice"];
      /** @description 로그인에 사용되는 아이디 */
      accountId: string;
      /**
       * @description 계정 타입. 2: 노무사, 9: 노무사회 홈페이지 관리자 계정
       * @enum {string}
       */
      type:
        | "Blocked"
        | "Normal"
        | "Company"
        | "LaborAttorney"
        | "Suspended"
        | "Admin"
        | "Master";
      /**
       * @description 회원등급. 2: 일반 회원, 9: 관리자, 나머지:몰름
       * @enum {string}
       */
      grade:
        | "NonMember"
        | "Unknown1"
        | "Normal"
        | "Unknown4"
        | "Unknown6"
        | "Suspended"
        | "Admin";
      /** @description 이름 */
      name: string;
      /** @description 유선전화번호 */
      landline: string | null;
      /** @description 휴대전화 번호 */
      phone: string | null;
      /** @description 이메일 */
      email: string | null;
      /** @description 생년월일 */
      birth: string | null;
      /** @description 프로필 이미지 */
      profileImg: string | null;
      /** @description 노무사 회원 기수 */
      licenseCb: number | null;
      /** @description 노무사 회원 자격증 번호 */
      licenseNo: number | null;
      /** @description 회비 미납 월 수 */
      outstandingMonth: number;
      /** @description 입회비 납부 여부 */
      payEntranceFee: boolean;
      /** @description 맘모스를 사용중인지 여부 */
      useMommoss: boolean;
      /** @description 맘모스 유저 record */
      user: components["schemas"]["User$6PObkChBrJ5v9950AfAoDw"] | null;
    };
    List$KcplaaMember$n1qL2LgK1wWloKVbny6I_Q: {
      rows: components["schemas"]["KcplaaMember$n1qL2LgK1wWloKVbny6I_Q"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    "NoticeCategory$0KhelIcqssJxKfi0-pQ-Mw": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 공지사항 카테고리가 속한 그룹 id */
      groupId: number;
      /** @description 공지사항 카테고리 이름 */
      name: string;
    };
    "Notice$pkGxn-Ue16GEkSQIRshWGA": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 공지사항이 속한 그룹 id */
      groupId: number;
      /** @description 공지사항 제목 */
      title: string;
      /** @description 공지사항 내용 */
      content: string;
      /** @description 공지사항 내용 요약 */
      summary: string | null;
      /** @description 발송자명 */
      authorName: string | null;
      /** @description 공지사항을 작성한 그룹 멤버 id */
      authorId: number | null;
      /** @description 공지사항의 카테고리 id */
      categoryId: number | null;
      /**
       * @description 공지를 읽었는지 여부
       * - true: 읽지 않음, false: 읽음
       */
      unread: boolean | null;
      /** @description 공지사항의 카테고리 */
      category:
        | components["schemas"]["NoticeCategory$0KhelIcqssJxKfi0-pQ-Mw"]
        | null;
      /** @description 공지사항의 첨부파일 */
      attachedFiles: components["schemas"]["File$0KhelIcqssJxKfi0-pQ-Mw"][];
    };
    "List$Notice$pkGxn-Ue16GEkSQIRshWGA": {
      rows: components["schemas"]["Notice$pkGxn-Ue16GEkSQIRshWGA"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    "Survey$0KhelIcqssJxKfi0-pQ-Mw": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 지금까지 제출된 응답의 총 개수
       * @default 0
       */
      responseCount: number;
      /**
       * @description 설문 문항 순서. 설문 문항 id를 가지는 배열로, 배열에서의 문항 id 순서가 실제
       * 문항의 순서를 나타낸다.
       */
      order: number[];
      /**
       * @description 제출시 추가 인증 필요 여부
       * @default false
       */
      secure: boolean;
      /**
       * @description 중복 응답 가능 여부
       * @default false
       */
      multiple: boolean;
      /**
       * @description 제출 후 수정 가능 여부
       * @default true
       */
      editable: boolean;
      /**
       * @description 종료된 설문인지 여부. 종료된 설문이면 제출&수정이 불가능함
       * @default false
       */
      finished: boolean;
      /** @description 설문이 속한 그룹 id */
      groupId: number;
      /** @description 설문 제목 */
      title: string;
      /** @description 설문 설명 */
      description: string | null;
      /**
       * Format: date-time
       * @description 설문 시작일
       */
      startedAt: string | null;
      /**
       * Format: date-time
       * @description 설문 만료일. 만료일이 지나면 제출 불가능한 설문으로 변경됨
       */
      finishedAt: string | null;
      /**
       * @description 선착순 몇개까지 응답을 받을 것인지
       * - 값이 없으면 무제한
       * - 값이 있으면 해당 값만큼만 응답을 받고, 이후에는 제출 불가능한 설문으로 변경됨
       */
      maxResponses: number | null;
      /** @description 설문 공개 여부. 관리자가 아니면 비공개 항목을 볼 수 없음 */
      visible: boolean;
      /** @description 설문을 생성한 그룹 멤버 id */
      authorId: number;
    };
    Notice$zzcF6it_mqOZysvuAGUQqw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 공지사항이 속한 그룹 id */
      groupId: number;
      /** @description 공지사항 제목 */
      title: string;
      /** @description 공지사항 내용 */
      content: string;
      /** @description 공지사항 내용 요약 */
      summary: string | null;
      /** @description 발송자명 */
      authorName: string | null;
      /** @description 공지사항을 작성한 그룹 멤버 id */
      authorId: number | null;
      /** @description 공지사항의 카테고리 id */
      categoryId: number | null;
      /** @description 공지사항의 카테고리 */
      category:
        | components["schemas"]["NoticeCategory$0KhelIcqssJxKfi0-pQ-Mw"]
        | null;
      /**
       * @description 공지사항에 붙은 설문
       * @default null
       */
      survey: components["schemas"]["Survey$0KhelIcqssJxKfi0-pQ-Mw"] | null;
      /** @description 공지사항의 첨부파일 */
      attachedFiles: components["schemas"]["File$0KhelIcqssJxKfi0-pQ-Mw"][];
    };
    CreateNoticeCategoryDto: {
      /** @description 공지사항 카테고리 이름 */
      name: string;
    };
    NoticeCategory$mZFLkyvTelC5g8XnyQrpOw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 공지사항 카테고리가 속한 그룹 id */
      groupId: number;
      /** @description 공지사항 카테고리 이름 */
      name: string;
    };
    List$NoticeCategory$mZFLkyvTelC5g8XnyQrpOw: {
      rows: components["schemas"]["NoticeCategory$mZFLkyvTelC5g8XnyQrpOw"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    "Notice$0KhelIcqssJxKfi0-pQ-Mw": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 공지사항이 속한 그룹 id */
      groupId: number;
      /** @description 공지사항 제목 */
      title: string;
      /** @description 공지사항 내용 */
      content: string;
      /** @description 공지사항 내용 요약 */
      summary: string | null;
      /** @description 발송자명 */
      authorName: string | null;
      /** @description 공지사항 공개 여부. 관리자가 아니면 비공개 항목을 볼 수 없음 */
      visible: boolean;
      /** @description 공지사항을 작성한 그룹 멤버 id */
      authorId: number | null;
      /** @description 공지사항의 카테고리 id */
      categoryId: number | null;
    };
    NoticeCategory$i1oG3OeSZXeUZ6tZ9jV4bQ: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 공지사항 카테고리가 속한 그룹 id */
      groupId: number;
      /** @description 공지사항 카테고리 이름 */
      name: string;
      /** @description 카테고리에 속한 공지사항들 */
      notices: components["schemas"]["Notice$0KhelIcqssJxKfi0-pQ-Mw"][];
    };
    CreateNoticeDto: {
      /**
       * @description 공지사항의 카테고리 id
       * @example null
       */
      categoryId?: number;
      /**
       * @description 공지사항에 붙일 설문 id
       * @example null
       */
      surveyId?: number;
      /** @description 공지사항 제목 */
      title: string;
      /** @description 공지사항 내용 */
      content: string;
      /** @description 공지사항 내용 요약, */
      summary?: string;
      /** @description 발송자명 */
      authorName?: string;
      /** @description 공지사항 공개 여부 */
      visible: boolean;
      /** @description 공지사항에 붙일 파일 id들 */
      fileIds?: string[];
    };
    Notice$Cbwe92YYn1sQ4w7UU6OECg: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 공지사항이 속한 그룹 id */
      groupId: number;
      /** @description 공지사항 제목 */
      title: string;
      /** @description 공지사항 내용 */
      content: string;
      /** @description 공지사항 내용 요약 */
      summary: string | null;
      /** @description 발송자명 */
      authorName: string | null;
      /** @description 공지사항 공개 여부. 관리자가 아니면 비공개 항목을 볼 수 없음 */
      visible: boolean;
      /** @description 공지사항을 작성한 그룹 멤버 id */
      authorId: number | null;
      /** @description 공지사항의 카테고리 id */
      categoryId: number | null;
      /** @description 공지사항의 카테고리 */
      category:
        | components["schemas"]["NoticeCategory$0KhelIcqssJxKfi0-pQ-Mw"]
        | null;
      /**
       * @description 공지사항에 붙은 설문
       * @default null
       */
      survey: components["schemas"]["Survey$0KhelIcqssJxKfi0-pQ-Mw"] | null;
      /** @description 공지사항의 첨부파일 */
      attachedFiles: components["schemas"]["File$0KhelIcqssJxKfi0-pQ-Mw"][];
    };
    List$Notice$Cbwe92YYn1sQ4w7UU6OECg: {
      rows: components["schemas"]["Notice$Cbwe92YYn1sQ4w7UU6OECg"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    UpdateNoticeDto: {
      /**
       * @description 공지사항의 카테고리 id
       * @example null
       */
      categoryId?: number;
      /**
       * @description 공지사항에 붙일 설문 id
       * @example null
       */
      surveyId?: number;
      /** @description 공지사항 제목 */
      title?: string;
      /** @description 공지사항 내용 */
      content?: string;
      /** @description 공지사항 내용 요약, */
      summary?: string;
      /** @description 발송자명 */
      authorName?: string;
      /** @description 공지사항 공개 여부 */
      visible?: boolean;
      /** @description 공지사항에 붙일 파일 id들 */
      fileIds?: string[];
    };
    "NotificationBlock$NSy-VJnYStQvYjo8W9Fv8A": {
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 그룹 멤버가 수신 거부한 알림 카테고리 id */
      categoryId: number;
      /** @description 알림 카테고리를 수신 거부한 그룹 멤버 id */
      groupMemberId: number;
    };
    NotificationCategory$NI5HzFgKUWkFnsQXSUkeBg: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 기본값인지 여부, 기본값이면 삭제/비활성화 불가
       * @default false
       */
      default: boolean;
      /** @description 알림 카테고리가 속한 그룹 id */
      groupId: number;
      /** @description 알림 카테고리 이름 */
      name: string;
      /** @description 본인이 해당 알림 카테고리를 수신 거부했는지 여부 */
      blocked:
        | components["schemas"]["NotificationBlock$NSy-VJnYStQvYjo8W9Fv8A"]
        | null;
    };
    BlockNotificationDto: {
      /**
       * @description 알림 차단 여부, true면 차단, false면 차단 해제
       * @example true
       */
      block: boolean;
    };
    Notification$Z9ANZn1E5egnIvqE7fOY3Q: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @default idle
       * @enum {string}
       */
      sendStatus: "idle" | "delayed" | "pending" | "sended" | "completed";
      unread: boolean | null;
      /** @description 알림메시지가 속한 그룹 id */
      groupId: number;
      /** @description 알림메시지가 속한 카테고리 id */
      categoryId: number;
      /** @description 알림에 포함되는 앱 링크 */
      link: string | null;
      /** @description 알림 제목 */
      title: string;
      /** @description 알림 소제목(푸시에선 ios에서만 적용됨) */
      subtitle: string | null;
      /** @description 알림 내용 */
      message: string | null;
      /**
       * @description 알림 추가정보
       *
       *
       * - sound등의 값으로 알림 소리를 바꾸거나 할 수 있다고 함
       */
      payload: { [key: string]: unknown } | null;
      /**
       * Format: date-time
       * @description 알림 예약 발송 시간. minute 수준의 정확도로 설정 가능
       */
      sendAt: string | null;
      /**
       * @description 알림메시지를 받을 대상 타입
       * @enum {string}
       */
      targetType: "all" | "team" | "device" | "member";
      /** @description 알림메시지를 받을 대상 id */
      targetIds: { [key: string]: unknown } | null;
      /** @description 알림메시지가 속한 카테고리 */
      category:
        | components["schemas"]["NotificationCategory$0KhelIcqssJxKfi0-pQ-Mw"]
        | null;
    };
    List$Notification$Z9ANZn1E5egnIvqE7fOY3Q: {
      rows: components["schemas"]["Notification$Z9ANZn1E5egnIvqE7fOY3Q"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    Notification$pKSBV_Qn5s1bLpiU0YwG0Q: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @default idle
       * @enum {string}
       */
      sendStatus: "idle" | "delayed" | "pending" | "sended" | "completed";
      /** @description 알림메시지가 속한 그룹 id */
      groupId: number;
      /** @description 알림메시지가 속한 카테고리 id */
      categoryId: number;
      /** @description 알림에 포함되는 앱 링크 */
      link: string | null;
      /** @description 알림 제목 */
      title: string;
      /** @description 알림 소제목(푸시에선 ios에서만 적용됨) */
      subtitle: string | null;
      /** @description 알림 내용 */
      message: string | null;
      /**
       * @description 알림 추가정보
       *
       *
       * - sound등의 값으로 알림 소리를 바꾸거나 할 수 있다고 함
       */
      payload: { [key: string]: unknown } | null;
      /**
       * Format: date-time
       * @description 알림 예약 발송 시간. minute 수준의 정확도로 설정 가능
       */
      sendAt: string | null;
      /**
       * @description 알림메시지를 받을 대상 타입
       * @enum {string}
       */
      targetType: "all" | "team" | "device" | "member";
      /** @description 알림메시지를 받을 대상 id */
      targetIds: { [key: string]: unknown } | null;
      /** @description 알림메시지가 속한 카테고리 */
      category:
        | components["schemas"]["NotificationCategory$0KhelIcqssJxKfi0-pQ-Mw"]
        | null;
    };
    NotificationCategory: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 기본값인지 여부, 기본값이면 삭제/비활성화 불가
       * @default false
       */
      default: boolean;
      /**
       * @description 사용중인지 여부
       * @default false
       */
      unused: boolean;
      /** @description 알림 카테고리가 속한 그룹 id */
      groupId: number;
      /** @description 알림 카테고리 이름 */
      name: string;
      /**
       * @description 알림메시지 타입. system: 앱에서 보내는 시스템 알림, user: 관리자가 보내는 일반 알림
       * @enum {string}
       */
      type: "system" | "user";
    };
    CreateNotificationCategoryDto: {
      /** @description 알림 카테고리 이름 */
      name: string;
    };
    UpdateNotificationCategoryDto: {
      /**
       * @description 알림 카테고리 사용 여부, true이면 일반 사용자들에게 수신 여부 토글 버튼이 노출되지 않음
       * @example true
       */
      unused?: boolean;
    };
    CreateNotificationDtoV1: {
      /**
       * Format: date-time
       * @description 알림 예약 발송 시간
       * @example null
       */
      sendAt?: string;
      /**
       * @description 알림을 받을 그룹 멤버 id 목록. teamIds와 groupMemberIds 둘 다 없다면 모든 그룹 멤버에게 알림을 보낸다.
       * @default []
       * @example [
       *   1,
       *   2
       * ]
       */
      groupMemberIds?: number[];
      /**
       * @description 알림을 받을 그룹 팀 id 목록.\n팀에 속한 모든 멤버에게 알림을 보냅니다.\n
       * 만약 groupMemberIds가 같이 제공된다면 groupMemberIds에 해당하는 멤버들도 포함됩니다.\n
       * 중복된 멤버에게는 한 번만 알림을 보냅니다.
       * @default []
       * @example [
       *   1,
       *   2
       * ]
       */
      teamIds?: number[];
      /**
       * @description 알림 카테고리 id
       * @example 1
       */
      categoryId: number;
      /**
       * @description 알림을 눌렀을 때 연결될 링크
       * @example /notice/notice-test
       */
      link?: string;
      /**
       * @description 알림 제목
       * @example test push notification
       */
      title: string;
      /**
       * @description 알림 부제목, ios에서만 유효
       * @example only for ios
       */
      subtitle?: string;
      /**
       * @description 알림 본문
       * @example go to notice
       */
      message?: string;
      /**
       * @description 알림 추가 데이터
       * @default {}
       */
      payload?: { [key: string]: unknown };
      /**
       * @description 임시 저장인지 여부
       * @default false
       */
      temporary?: boolean;
    };
    CreateNotificationDtoV2: {
      /**
       * Format: date-time
       * @description 알림 예약 발송 시간
       * @example null
       */
      sendAt?: string;
      /**
       * @description 알림메시지 발송 대상 id 목록
       * @example [
       *   2
       * ]
       */
      targetIds?: Partial<string[]> & Partial<number[]>;
      /**
       * @description 알림메시지 발송 대상 타입
       * @example member
       * @enum {string}
       */
      targetType: "all" | "team" | "device" | "member";
      /**
       * @description 알림 카테고리 id
       * @example 1
       */
      categoryId: number;
      /**
       * @description 알림을 눌렀을 때 연결될 링크
       * @example /notice/notice-test
       */
      link?: string;
      /**
       * @description 알림 제목
       * @example test push notification
       */
      title: string;
      /**
       * @description 알림 부제목, ios에서만 유효
       * @example only for ios
       */
      subtitle?: string;
      /**
       * @description 알림 본문
       * @example go to notice
       */
      message?: string;
      /**
       * @description 알림 추가 데이터
       * @default {}
       */
      payload?: { [key: string]: unknown };
      /**
       * @description 임시 저장인지 여부
       * @default false
       */
      temporary?: boolean;
    };
    "User$0KhelIcqssJxKfi0-pQ-Mw": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description uuid */
      uuid: string;
      /**
       * @description 한번이라도 로그인한 이력이 있는지 여부
       * @default false
       */
      loggedInBefore: boolean;
      /** @description 유저 이름 */
      name: string;
      /**
       * @description 이메일
       *
       *
       * - 애초에 로그인은 account.id로 함. account.id는 unique함
       * - 이메일과 account.id는 관련 없음
       * - *노무사회 홈페이지 멤버들은 이메일이 중복됨*
       */
      email: string | null;
      /** @description 전화번호 */
      phone: string | null;
      /** @description 계정이 종속된 그룹 id */
      belongingGroupId: number | null;
    };
    GroupMember$iXVp0y1xpAiIQOUO9Jmukw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 유저가 속한 그룹 id */
      groupId: number;
      /**
       * @description 멤버 타입
       * @enum {string}
       */
      type: "organization" | "association";
      /** @description 그룹에 속하는 유저 id */
      userId: number;
      /** @description 그룹에서 유저가 가지는 직위 id */
      positionId: number | null;
      /** @description 그룹에 속하는 유저 */
      user: components["schemas"]["User$0KhelIcqssJxKfi0-pQ-Mw"] | null;
      /** @description 알림 메시지를 읽었는지 여부 */
      notificationReadStatus: boolean | null;
    };
    "Device$NSy-VJnYStQvYjo8W9Fv8A": {
      /**
       * @description 테스트 기기인지 여부
       * @default false
       */
      testDevice: boolean;
      /** @description 클라이언트 기기 uuid */
      uuid: string;
      /** @description 클라이언트 기기 별칭 */
      alias: string | null;
      /**
       * @description 클라이언트 기기 타입
       * @default unknown
       */
      platform: { [key: string]: unknown };
      /** @description 클라이언트 기기의 푸시 알림 토큰 */
      pushToken: string | null;
      /** @description 클라이언트 기기 정보 */
      deviceInfo: { [key: string]: unknown } | null;
      /** @description 기기를 소유한 사용자 id */
      userId: number | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    "PushFailure$0KhelIcqssJxKfi0-pQ-Mw": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 실패한 발송 단계 */
      step: string;
      /** @description 실패 코드 */
      code: string;
      /** @description 실패에 대한 자세한 에러 내용 */
      error: { [key: string]: unknown } | null;
      /** @description 실패한 발송 결과 id */
      resultId: number;
    };
    PushResult$Rz6hOg96mojDnrRas3i3wA: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 푸시알림 전송 상태
       * @enum {string}
       */
      status: "pending" | "success" | "error" | "rejected";
      /** @description 푸시알림 결과를 가져오기 위한 푸시알림 ID */
      receiptId: string | null;
      /** @description 전송된 알림 id */
      notificationId: number;
      /** @description 알림이 전송된 그룹 멤버 id */
      groupMemberId: number | null;
      /** @description 알림이 전송되는 기기 id */
      deviceId: number | null;
      /**
       * @description 알림이 전송되는 기기
       *
       *
       * - 알 수 없는 기기 등으로 표시해야됨
       */
      device: components["schemas"]["Device$NSy-VJnYStQvYjo8W9Fv8A"] | null;
      /** @description 푸시알림 전송 실패 사유 */
      failure:
        | components["schemas"]["PushFailure$0KhelIcqssJxKfi0-pQ-Mw"]
        | null;
    };
    "Notification$TJE48aJZdLstGzOQ-ySFdA": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @default idle
       * @enum {string}
       */
      sendStatus: "idle" | "delayed" | "pending" | "sended" | "completed";
      /** @description 알림메시지가 속한 그룹 id */
      groupId: number;
      /** @description 알림메시지가 속한 카테고리 id */
      categoryId: number;
      /** @description 알림에 포함되는 앱 링크 */
      link: string | null;
      /** @description 알림 제목 */
      title: string;
      /** @description 알림 소제목(푸시에선 ios에서만 적용됨) */
      subtitle: string | null;
      /** @description 알림 내용 */
      message: string | null;
      /**
       * @description 알림 추가정보
       *
       *
       * - sound등의 값으로 알림 소리를 바꾸거나 할 수 있다고 함
       */
      payload: { [key: string]: unknown } | null;
      /**
       * Format: date-time
       * @description 알림 예약 발송 시간. minute 수준의 정확도로 설정 가능
       */
      sendAt: string | null;
      /**
       * @description 알림메시지를 받을 대상 타입
       * @enum {string}
       */
      targetType: "all" | "team" | "device" | "member";
      /** @description 알림메시지를 받을 대상 id */
      targetIds: { [key: string]: unknown } | null;
      /** @description 알림메시지가 속한 카테고리 */
      category:
        | components["schemas"]["NotificationCategory$0KhelIcqssJxKfi0-pQ-Mw"]
        | null;
      /** @description 알림메시지를 받는 그룹 멤버들 */
      groupMembers: components["schemas"]["GroupMember$iXVp0y1xpAiIQOUO9Jmukw"][];
      /** @description 알림메시지 푸시 발송 결과들 */
      results: components["schemas"]["PushResult$Rz6hOg96mojDnrRas3i3wA"][];
    };
    "List$Notification$TJE48aJZdLstGzOQ-ySFdA": {
      rows: components["schemas"]["Notification$TJE48aJZdLstGzOQ-ySFdA"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    CreateSurveyResponseDto: {
      /**
       * @description 설문 답변 리스트
       * @example [
       *   null,
       *   [
       *     "1",
       *     "2"
       *   ],
       *   "wogns3623@gmail.com"
       * ]
       */
      answers: { [key: string]: unknown }[];
    };
    "SurveyAnswer$0KhelIcqssJxKfi0-pQ-Mw": {
      id: number;
      /**
       * @description 답변 내용
       * @example wogns3623@gmail.com
       */
      content: string;
      /** @description 답변이 속해있는 설문조사 id */
      surveyId: number;
      /** @description 답변이 속해있는 설문조사 응답 id */
      responseId: number;
      /** @description 답변이 해당하는 설문조사 문항 id */
      questionId: number;
    };
    "SurveyResponse$9OFYQQf-2fNB86T2wJAh1A": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 응답이 속해있는 설문조사 id */
      surveyId: number;
      /** @description 응답을 작성한 그룹 멤버 id */
      responderId: number | null;
      /** @description 문항에 해당하는 답변들 */
      answers: components["schemas"]["SurveyAnswer$0KhelIcqssJxKfi0-pQ-Mw"][];
    };
    "List$SurveyResponse$9OFYQQf-2fNB86T2wJAh1A": {
      rows: components["schemas"]["SurveyResponse$9OFYQQf-2fNB86T2wJAh1A"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    "SurveyResponse$0KhelIcqssJxKfi0-pQ-Mw": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 응답이 속해있는 설문조사 id */
      surveyId: number;
      /** @description 응답을 작성한 그룹 멤버 id */
      responderId: number | null;
    };
    Survey$VMXjPDjGpWvMFjHX2MHdlQ: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 지금까지 제출된 응답의 총 개수
       * @default 0
       */
      responseCount: number;
      /**
       * @description 설문 문항 순서. 설문 문항 id를 가지는 배열로, 배열에서의 문항 id 순서가 실제
       * 문항의 순서를 나타낸다.
       */
      order: number[];
      /**
       * @description 제출시 추가 인증 필요 여부
       * @default false
       */
      secure: boolean;
      /**
       * @description 중복 응답 가능 여부
       * @default false
       */
      multiple: boolean;
      /**
       * @description 제출 후 수정 가능 여부
       * @default true
       */
      editable: boolean;
      /**
       * @description 종료된 설문인지 여부. 종료된 설문이면 제출&수정이 불가능함
       * @default false
       */
      finished: boolean;
      /** @description 설문이 속한 그룹 id */
      groupId: number;
      /** @description 설문 제목 */
      title: string;
      /** @description 설문 설명 */
      description: string | null;
      /**
       * Format: date-time
       * @description 설문 시작일
       */
      startedAt: string | null;
      /**
       * Format: date-time
       * @description 설문 만료일. 만료일이 지나면 제출 불가능한 설문으로 변경됨
       */
      finishedAt: string | null;
      /**
       * @description 선착순 몇개까지 응답을 받을 것인지
       * - 값이 없으면 무제한
       * - 값이 있으면 해당 값만큼만 응답을 받고, 이후에는 제출 불가능한 설문으로 변경됨
       */
      maxResponses: number | null;
      /** @description 설문을 생성한 그룹 멤버 id */
      authorId: number;
      /**
       * @description 응답 제출이 가능한 설문인지 여부
       * - 제출 불가능한 설문이어도 이미 제출한 응답에 대해서는
       * editable이라면 설문이 종료되기 전까지는 수정 가능함
       */
      submittable: boolean | null;
      /** @description 특정 그룹 멤버 한명의 설문 응답 */
      myResponse:
        | components["schemas"]["SurveyResponse$0KhelIcqssJxKfi0-pQ-Mw"]
        | null;
    };
    List$Survey$VMXjPDjGpWvMFjHX2MHdlQ: {
      rows: components["schemas"]["Survey$VMXjPDjGpWvMFjHX2MHdlQ"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    SubjectiveSurveyFormat: {
      /**
       * @description 문자열을 해석할 정규식
       * @example ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$
       */
      regex?: string;
      /**
       * @description 정규식에 매칭되지 않을 경우 출력할 에러 메시지
       * @example 이메일 형식이 아닙니다.
       */
      message?: string;
    };
    ObjectiveSurveyFormat: {
      /**
       * @description 선택지 목록
       * @example [
       *   "1",
       *   "2",
       *   "3",
       *   "4",
       *   "5"
       * ]
       */
      options: string[];
      /**
       * @description 선택지 최소 선택 개수
       * @default 1
       */
      min?: number;
      /** @description 선택지 최대 선택 개수 */
      max?: number;
      /**
       * @description 기타 항목이 존재하는지 여부
       * @default false
       */
      hasEtc?: boolean;
      /** @description 범위 선택형 질문에서 최소값의 라벨 */
      minTitle?: string;
      /** @description 선택지 최대 선택 최대값의 라벨 */
      maxTitle?: string;
    };
    "SurveyQuestion$0KhelIcqssJxKfi0-pQ-Mw": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 문항이 필수 응답인지 여부
       * @default false
       */
      required: boolean;
      /**
       * @description 설문조사 문항 형식, 응답(answer.content)을 해석하는데에 사용됨
       * - textType: text | textarea
       * - { regex: 'a+b', message: 'wrong!' }
       * - selectableType: radio | checkbox | dropdown | date | time | datetime
       * - {'1': { label: 'yes' }, '2': { label: 'no', ext: '...' }, meta: { min: 1, max: 1 }}
       * @example { regex: 'a+b', message: 'wrong!' }
       */
      format:
        | (
            | components["schemas"]["SubjectiveSurveyFormat"]
            | components["schemas"]["ObjectiveSurveyFormat"]
          )
        | null;
      /** @description 설문 문항별 제목 */
      title: string;
      /** @description 설문 문항별 설명 */
      description: string | null;
      /**
       * @description 문항의 타입
       * @enum {string}
       */
      type:
        | "blank"
        | "short_text"
        | "long_text"
        | "date"
        | "time"
        | "single_select"
        | "multi_select"
        | "dropdown"
        | "range";
      /** @description 문항이 속해있는 설문조사 id */
      surveyId: number;
    };
    SurveyResponse$88kuMiqV8MCAaSE2a_r5Mw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 응답이 속해있는 설문조사 id */
      surveyId: number;
      /** @description 응답을 작성한 그룹 멤버 id */
      responderId: number | null;
      /** @description 문항에 해당하는 답변들 */
      answers: components["schemas"]["SurveyAnswer$0KhelIcqssJxKfi0-pQ-Mw"][];
    };
    Survey$ZiKKqHygCA1h2FWWVkhrkw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 지금까지 제출된 응답의 총 개수
       * @default 0
       */
      responseCount: number;
      /**
       * @description 설문 문항 순서. 설문 문항 id를 가지는 배열로, 배열에서의 문항 id 순서가 실제
       * 문항의 순서를 나타낸다.
       */
      order: number[];
      /**
       * @description 제출시 추가 인증 필요 여부
       * @default false
       */
      secure: boolean;
      /**
       * @description 중복 응답 가능 여부
       * @default false
       */
      multiple: boolean;
      /**
       * @description 제출 후 수정 가능 여부
       * @default true
       */
      editable: boolean;
      /**
       * @description 종료된 설문인지 여부. 종료된 설문이면 제출&수정이 불가능함
       * @default false
       */
      finished: boolean;
      /** @description 설문이 속한 그룹 id */
      groupId: number;
      /** @description 설문 제목 */
      title: string;
      /** @description 설문 설명 */
      description: string | null;
      /**
       * Format: date-time
       * @description 설문 시작일
       */
      startedAt: string | null;
      /**
       * Format: date-time
       * @description 설문 만료일. 만료일이 지나면 제출 불가능한 설문으로 변경됨
       */
      finishedAt: string | null;
      /**
       * @description 선착순 몇개까지 응답을 받을 것인지
       * - 값이 없으면 무제한
       * - 값이 있으면 해당 값만큼만 응답을 받고, 이후에는 제출 불가능한 설문으로 변경됨
       */
      maxResponses: number | null;
      /** @description 설문을 생성한 그룹 멤버 id */
      authorId: number;
      /**
       * @description 응답 제출이 가능한 설문인지 여부
       * - 제출 불가능한 설문이어도 이미 제출한 응답에 대해서는
       * editable이라면 설문이 종료되기 전까지는 수정 가능함
       */
      submittable: boolean | null;
      /** @description 설문 문항들 */
      questions: components["schemas"]["SurveyQuestion$0KhelIcqssJxKfi0-pQ-Mw"][];
      /** @description 특정 그룹 멤버 한명의 설문 응답 */
      myResponse:
        | components["schemas"]["SurveyResponse$88kuMiqV8MCAaSE2a_r5Mw"]
        | null;
    };
    CreateNestedSurveyQuestionDto: {
      /** @description 설문 문항의 형식 */
      format?:
        | ("email" | "phone" | "url" | "number" | "switch")
        | components["schemas"]["SubjectiveSurveyFormat"]
        | components["schemas"]["ObjectiveSurveyFormat"];
      /**
       * @description 설문 문항 제목
       * @example 이메일을 입력해주세요
       */
      title: string;
      /**
       * @description 설문 문항 설명
       * @example 당첨시 해당 이메일로 연락드립니다.
       */
      description?: string;
      /**
       * @description 필수 여부
       * @default false
       * @example true
       */
      required: boolean;
      /**
       * @description 설문 문항 타입
       * @example short_text
       * @enum {string}
       */
      type:
        | "blank"
        | "short_text"
        | "long_text"
        | "date"
        | "time"
        | "single_select"
        | "multi_select"
        | "dropdown"
        | "range";
    };
    CreateSurveyDto: {
      /**
       * Format: date-time
       * @description 설문 시작일
       * @example null
       */
      startedAt?: string;
      /**
       * Format: date-time
       * @description 설문 종료일
       * @example null
       */
      finishedAt?: string;
      /**
       * @description 최대 응답 개수, undefined면 무제한
       * @example null
       */
      maxResponses?: number;
      /** @description 질문 리스트 */
      questions?: components["schemas"]["CreateNestedSurveyQuestionDto"][];
      /**
       * @description 설문 제목
       * @example 무슨무슨 응모
       */
      title: string;
      /**
       * @description 설문 설명
       * @example 추첨을 통해 아메리카노 쿠폰을 드립니다
       */
      description?: string;
      /** @description 설문 공개 여부 */
      visible: boolean;
      /**
       * @description 제출시 추가 인증 필요 여부
       * @default false
       */
      secure: boolean;
      /**
       * @description 중복 응답 가능 여부
       * @default false
       */
      multiple: boolean;
      /**
       * @description 제출 후 수정 가능 여부
       * @default true
       */
      editable: boolean;
    };
    "User$NSy-VJnYStQvYjo8W9Fv8A": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description uuid */
      uuid: string;
      /**
       * @description 한번이라도 로그인한 이력이 있는지 여부
       * @default false
       */
      loggedInBefore: boolean;
      /** @description 유저 이름 */
      name: string;
      /**
       * @description 이메일
       *
       *
       * - 애초에 로그인은 account.id로 함. account.id는 unique함
       * - 이메일과 account.id는 관련 없음
       * - *노무사회 홈페이지 멤버들은 이메일이 중복됨*
       */
      email: string | null;
      /** @description 전화번호 */
      phone: string | null;
      /** @description 계정이 종속된 그룹 id */
      belongingGroupId: number | null;
    };
    "GroupMember$dQ1lHHvrCDC-vcpozpaX_w": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 유저가 속한 그룹 id */
      groupId: number;
      /**
       * @description 멤버 타입
       * @enum {string}
       */
      type: "organization" | "association";
      /** @description 그룹에 속하는 유저 id */
      userId: number;
      /** @description 그룹에서 유저가 가지는 직위 id */
      positionId: number | null;
      /** @description 그룹에 속하는 유저 */
      user: components["schemas"]["User$NSy-VJnYStQvYjo8W9Fv8A"] | null;
    };
    "Survey$h9t27cjaT6UA-eivxAOfCQ": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 지금까지 제출된 응답의 총 개수
       * @default 0
       */
      responseCount: number;
      /**
       * @description 설문 문항 순서. 설문 문항 id를 가지는 배열로, 배열에서의 문항 id 순서가 실제
       * 문항의 순서를 나타낸다.
       */
      order: number[];
      /**
       * @description 제출시 추가 인증 필요 여부
       * @default false
       */
      secure: boolean;
      /**
       * @description 중복 응답 가능 여부
       * @default false
       */
      multiple: boolean;
      /**
       * @description 제출 후 수정 가능 여부
       * @default true
       */
      editable: boolean;
      /**
       * @description 종료된 설문인지 여부. 종료된 설문이면 제출&수정이 불가능함
       * @default false
       */
      finished: boolean;
      /** @description 설문이 속한 그룹 id */
      groupId: number;
      /** @description 설문 제목 */
      title: string;
      /** @description 설문 설명 */
      description: string | null;
      /**
       * Format: date-time
       * @description 설문 시작일
       */
      startedAt: string | null;
      /**
       * Format: date-time
       * @description 설문 만료일. 만료일이 지나면 제출 불가능한 설문으로 변경됨
       */
      finishedAt: string | null;
      /**
       * @description 선착순 몇개까지 응답을 받을 것인지
       * - 값이 없으면 무제한
       * - 값이 있으면 해당 값만큼만 응답을 받고, 이후에는 제출 불가능한 설문으로 변경됨
       */
      maxResponses: number | null;
      /** @description 설문 공개 여부. 관리자가 아니면 비공개 항목을 볼 수 없음 */
      visible: boolean;
      /** @description 설문을 생성한 그룹 멤버 id */
      authorId: number;
      /** @description 설문을 생성한 그룹 멤버 */
      author:
        | components["schemas"]["GroupMember$dQ1lHHvrCDC-vcpozpaX_w"]
        | null;
    };
    "List$Survey$h9t27cjaT6UA-eivxAOfCQ": {
      rows: components["schemas"]["Survey$h9t27cjaT6UA-eivxAOfCQ"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    "Survey$XTLPmAfq-V39AwN2J_RyWw": {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 지금까지 제출된 응답의 총 개수
       * @default 0
       */
      responseCount: number;
      /**
       * @description 설문 문항 순서. 설문 문항 id를 가지는 배열로, 배열에서의 문항 id 순서가 실제
       * 문항의 순서를 나타낸다.
       */
      order: number[];
      /**
       * @description 제출시 추가 인증 필요 여부
       * @default false
       */
      secure: boolean;
      /**
       * @description 중복 응답 가능 여부
       * @default false
       */
      multiple: boolean;
      /**
       * @description 제출 후 수정 가능 여부
       * @default true
       */
      editable: boolean;
      /**
       * @description 종료된 설문인지 여부. 종료된 설문이면 제출&수정이 불가능함
       * @default false
       */
      finished: boolean;
      /** @description 설문이 속한 그룹 id */
      groupId: number;
      /** @description 설문 제목 */
      title: string;
      /** @description 설문 설명 */
      description: string | null;
      /**
       * Format: date-time
       * @description 설문 시작일
       */
      startedAt: string | null;
      /**
       * Format: date-time
       * @description 설문 만료일. 만료일이 지나면 제출 불가능한 설문으로 변경됨
       */
      finishedAt: string | null;
      /**
       * @description 선착순 몇개까지 응답을 받을 것인지
       * - 값이 없으면 무제한
       * - 값이 있으면 해당 값만큼만 응답을 받고, 이후에는 제출 불가능한 설문으로 변경됨
       */
      maxResponses: number | null;
      /** @description 설문 공개 여부. 관리자가 아니면 비공개 항목을 볼 수 없음 */
      visible: boolean;
      /** @description 설문을 생성한 그룹 멤버 id */
      authorId: number;
      /** @description 설문을 생성한 그룹 멤버 */
      author:
        | components["schemas"]["GroupMember$dQ1lHHvrCDC-vcpozpaX_w"]
        | null;
      /** @description 설문 문항들 */
      questions: components["schemas"]["SurveyQuestion$0KhelIcqssJxKfi0-pQ-Mw"][];
      /** @description 설문 응답들 */
      responses: components["schemas"]["SurveyResponse$88kuMiqV8MCAaSE2a_r5Mw"][];
    };
    SurveyQuestion$88kuMiqV8MCAaSE2a_r5Mw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 문항이 필수 응답인지 여부
       * @default false
       */
      required: boolean;
      /**
       * @description 설문조사 문항 형식, 응답(answer.content)을 해석하는데에 사용됨
       * - textType: text | textarea
       * - { regex: 'a+b', message: 'wrong!' }
       * - selectableType: radio | checkbox | dropdown | date | time | datetime
       * - {'1': { label: 'yes' }, '2': { label: 'no', ext: '...' }, meta: { min: 1, max: 1 }}
       * @example { regex: 'a+b', message: 'wrong!' }
       */
      format:
        | (
            | components["schemas"]["SubjectiveSurveyFormat"]
            | components["schemas"]["ObjectiveSurveyFormat"]
          )
        | null;
      /** @description 설문 문항별 제목 */
      title: string;
      /** @description 설문 문항별 설명 */
      description: string | null;
      /**
       * @description 문항의 타입
       * @enum {string}
       */
      type:
        | "blank"
        | "short_text"
        | "long_text"
        | "date"
        | "time"
        | "single_select"
        | "multi_select"
        | "dropdown"
        | "range";
      /** @description 문항이 속해있는 설문조사 id */
      surveyId: number;
      /** @description 문항에 해당하는 답변들 */
      answers: components["schemas"]["SurveyAnswer$0KhelIcqssJxKfi0-pQ-Mw"][];
    };
    Survey$s52ViJRMZP0c606z2ri2aQ: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /**
       * @description 지금까지 제출된 응답의 총 개수
       * @default 0
       */
      responseCount: number;
      /**
       * @description 설문 문항 순서. 설문 문항 id를 가지는 배열로, 배열에서의 문항 id 순서가 실제
       * 문항의 순서를 나타낸다.
       */
      order: number[];
      /**
       * @description 제출시 추가 인증 필요 여부
       * @default false
       */
      secure: boolean;
      /**
       * @description 중복 응답 가능 여부
       * @default false
       */
      multiple: boolean;
      /**
       * @description 제출 후 수정 가능 여부
       * @default true
       */
      editable: boolean;
      /**
       * @description 종료된 설문인지 여부. 종료된 설문이면 제출&수정이 불가능함
       * @default false
       */
      finished: boolean;
      /** @description 설문이 속한 그룹 id */
      groupId: number;
      /** @description 설문 제목 */
      title: string;
      /** @description 설문 설명 */
      description: string | null;
      /**
       * Format: date-time
       * @description 설문 시작일
       */
      startedAt: string | null;
      /**
       * Format: date-time
       * @description 설문 만료일. 만료일이 지나면 제출 불가능한 설문으로 변경됨
       */
      finishedAt: string | null;
      /**
       * @description 선착순 몇개까지 응답을 받을 것인지
       * - 값이 없으면 무제한
       * - 값이 있으면 해당 값만큼만 응답을 받고, 이후에는 제출 불가능한 설문으로 변경됨
       */
      maxResponses: number | null;
      /** @description 설문 공개 여부. 관리자가 아니면 비공개 항목을 볼 수 없음 */
      visible: boolean;
      /** @description 설문을 생성한 그룹 멤버 id */
      authorId: number;
      /** @description 설문 문항들 */
      questions: components["schemas"]["SurveyQuestion$88kuMiqV8MCAaSE2a_r5Mw"][];
    };
    UpdateSurveyDto: {
      /**
       * Format: date-time
       * @description 설문 시작일
       * @example null
       */
      startedAt?: string;
      /**
       * Format: date-time
       * @description 설문 종료일
       * @example null
       */
      finishedAt?: string;
      /**
       * @description 최대 응답 개수, undefined면 무제한
       * @example null
       */
      maxResponses?: number;
      /** @description 설문 종료 여부 */
      finished?: boolean;
      /**
       * @description 설문 제목
       * @example 무슨무슨 응모
       */
      title?: string;
      /**
       * @description 설문 설명
       * @example 추첨을 통해 아메리카노 쿠폰을 드립니다
       */
      description?: string;
      /** @description 설문 공개 여부 */
      visible?: boolean;
      /**
       * @description 제출시 추가 인증 필요 여부
       * @default false
       */
      secure?: boolean;
      /**
       * @description 중복 응답 가능 여부
       * @default false
       */
      multiple?: boolean;
      /**
       * @description 제출 후 수정 가능 여부
       * @default true
       */
      editable?: boolean;
    };
    BulkDeleteSurveyDto: {
      /** @description 삭제할 설문 id 목록 */
      surveyIds: number[];
    };
    CreateSurveyQuestionDto: {
      /** @description 설문 문항의 형식 */
      format?:
        | ("email" | "phone" | "url" | "number" | "switch")
        | components["schemas"]["SubjectiveSurveyFormat"]
        | components["schemas"]["ObjectiveSurveyFormat"];
      /**
       * @description 설문 문항 제목
       * @example 이메일을 입력해주세요
       */
      title: string;
      /**
       * @description 설문 문항 설명
       * @example 당첨시 해당 이메일로 연락드립니다.
       */
      description?: string;
      /**
       * @description 필수 여부
       * @default false
       * @example true
       */
      required: boolean;
      /**
       * @description 설문 문항 타입
       * @example short_text
       * @enum {string}
       */
      type:
        | "blank"
        | "short_text"
        | "long_text"
        | "date"
        | "time"
        | "single_select"
        | "multi_select"
        | "dropdown"
        | "range";
      /** @description 설문 문항 순서, 없거나 question 개수보다 크면 마지막에 추가됩니다. 0 <= index < question.length면 해당 위치 아래의 설문들이 한칸씩 밀려납니다. */
      index?: number;
    };
    UpdateSurveyQuestionDto: {
      /** @description 설문 문항의 형식 */
      format?:
        | ("email" | "phone" | "url" | "number" | "switch")
        | components["schemas"]["SubjectiveSurveyFormat"]
        | components["schemas"]["ObjectiveSurveyFormat"];
      /**
       * @description 설문 문항 제목
       * @example 이메일을 입력해주세요
       */
      title?: string;
      /**
       * @description 설문 문항 설명
       * @example 당첨시 해당 이메일로 연락드립니다.
       */
      description?: string;
      /**
       * @description 필수 여부
       * @default false
       * @example true
       */
      required?: boolean;
      /**
       * @description 설문 문항 타입
       * @example short_text
       * @enum {string}
       */
      type?:
        | "blank"
        | "short_text"
        | "long_text"
        | "date"
        | "time"
        | "single_select"
        | "multi_select"
        | "dropdown"
        | "range";
      /** @description 설문 문항 순서, 없거나 question 개수보다 크면 마지막에 추가됩니다. 0 <= index < question.length면 해당 위치 아래의 설문들이 한칸씩 밀려납니다. */
      index?: number;
    };
    UpdateDeviceDto: {
      /** @description 클라이언트 기기 별칭 */
      alias?: string | null;
      /**
       * @description 디바이스의 푸시 알림 토큰
       * @example ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]
       */
      pushToken?: string | null;
      /** @description 디바이스 정보 */
      deviceInfo?: { [key: string]: unknown } | null;
      testDevice?: boolean;
    };
    User$jNKBlzC61snIVfR8ioXwhA: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description uuid */
      uuid: string;
      /**
       * @description 한번이라도 로그인한 이력이 있는지 여부
       * @default false
       */
      loggedInBefore: boolean;
      /** @description 유저 이름 */
      name: string;
      /**
       * @description 이메일
       *
       *
       * - 애초에 로그인은 account.id로 함. account.id는 unique함
       * - 이메일과 account.id는 관련 없음
       * - *노무사회 홈페이지 멤버들은 이메일이 중복됨*
       */
      email: string | null;
      /** @description 전화번호 */
      phone: string | null;
      /** @description 계정이 종속된 그룹 id */
      belongingGroupId: number | null;
      /** @description 유저의 계정 id */
      accountId: string | null;
      /**
       * Format: date-time
       * @description 유저가 마지막으로 로그인한 시간
       */
      lastActivatedAt: string | null;
      /** @description 노무사회 홈페이지 멤버 */
      kcplaaMember:
        | components["schemas"]["KcplaaMember$1YYxKtMKdQIrcxeqS9gH3w"]
        | null;
      licenseFiles: components["schemas"]["File$0KhelIcqssJxKfi0-pQ-Mw"][];
      /** @description 유저 계정 */
      account: components["schemas"]["Account$0KhelIcqssJxKfi0-pQ-Mw"] | null;
    };
    UpdateUserMeDto: {
      /** @description 자격증 파일 id */
      licenseFileIds: string[];
    };
    KcplaaMember$FW238KUxWqVB1V5KjOyI2Q: {
      /** @description 이름 */
      name: string;
      /** @description 프로필 이미지 */
      profileImg: string | null;
      /** @description 노무사 회원 기수 */
      licenseCb: number | null;
      /** @description 노무사 회원 자격증 번호 */
      licenseNo: number | null;
    };
    User$tFI6qC0I7aqSExPPskaLJA: {
      /**
       * @description 한번이라도 로그인한 이력이 있는지 여부
       * @default false
       */
      loggedInBefore: boolean;
      /** @description 유저 이름 */
      name: string;
      /** @description 노무사회 홈페이지 멤버 */
      kcplaaMember:
        | components["schemas"]["KcplaaMember$FW238KUxWqVB1V5KjOyI2Q"]
        | null;
    };
    VideoPost$KYn23EnQvRAfAL0lTTpJGw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 동영상 게시글이 속한 그룹 id */
      groupId: number;
      /** @description 동영상 게시글 제목 */
      title: string;
      /** @description 동영상 게시글의 동영상 url */
      url: string;
      /** @description 동영상 썸네일 */
      thumbnailUrl: string | null;
      /** @description 동영상 길이 */
      length: number | null;
      /** @description 발송자명 */
      authorName: string | null;
      /** @description 동영상 게시글을 작성한 그룹 멤버 id */
      authorId: number | null;
    };
    List$VideoPost$KYn23EnQvRAfAL0lTTpJGw: {
      rows: components["schemas"]["VideoPost$KYn23EnQvRAfAL0lTTpJGw"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    CreateVideoPostDto: {
      /** @description 동영상 게시글 제목 */
      title: string;
      /** @description 동영상 게시글의 동영상 url */
      url: string;
      /** @description 동영상 게시글 공개 여부 */
      visible: boolean;
      /** @description 동영상 썸네일 */
      thumbnailUrl?: string;
      /** @description 동영상 길이 */
      length?: number;
      /** @description 발송자명 */
      authorName?: string;
    };
    VideoPost$mZFLkyvTelC5g8XnyQrpOw: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @description 동영상 게시글이 속한 그룹 id */
      groupId: number;
      /** @description 동영상 게시글 제목 */
      title: string;
      /** @description 동영상 게시글의 동영상 url */
      url: string;
      /** @description 동영상 썸네일 */
      thumbnailUrl: string | null;
      /** @description 동영상 길이 */
      length: number | null;
      /** @description 동영상 게시글 공개 여부. 관리자가 아니면 비공개 항목을 볼 수 없음 */
      visible: boolean;
      /** @description 발송자명 */
      authorName: string | null;
      /** @description 동영상 게시글을 작성한 그룹 멤버 id */
      authorId: number | null;
    };
    List$VideoPost$mZFLkyvTelC5g8XnyQrpOw: {
      rows: components["schemas"]["VideoPost$mZFLkyvTelC5g8XnyQrpOw"][];
      /** @description 조건에 맞는 값의 전체 개수, limit나 page에 영향을 받지 않는 값 */
      count: number;
    };
    UpdateVideoPostDto: {
      /** @description 동영상 게시글 제목 */
      title?: string;
      /** @description 동영상 게시글 공개 여부 */
      visible?: boolean;
      /** @description 동영상 썸네일 */
      thumbnailUrl?: string;
      /** @description 동영상 길이 */
      length?: number;
      /** @description 발송자명 */
      authorName?: string;
    };
    BulkDeleteVideoPostDto: {
      /** @description 동영상 게시글 id 목록 */
      videoPostIds: number[];
    };
  };
}

export interface operations {
  /** 새로운 유저를 생성합니다. */
  AuthController_register: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserDto"];
      };
    };
  };
  /** 로그인 정보로 refresh token, access token을 발급합니다. */
  AuthController_login: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GeneratedTokenResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginDto"];
      };
    };
  };
  /** refresh token으로 새로운 refresh token, access token을 발급합니다. */
  AuthController_refresh: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GeneratedTokenResponse"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
    };
  };
  /** 전달된 refresh token과 해당 token에서 파생된 모든 토큰들을 무효화합니다. */
  AuthController_logout: {
    parameters: {};
    responses: {
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
    };
  };
  /** 유저를 삭제합니다. */
  AuthController_withdrawal: {
    parameters: {};
    responses: {
      201: unknown;
    };
  };
  /** 명함의 uri을 중복체크 합니다. */
  BusinessCardController_checkUriExist: {
    parameters: {
      path: {
        businessCardUri: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": boolean;
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 유저의 모든 명함을 조회합니다. */
  BusinessCardController_getAllBusinessCard: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$BusinessCard$mZFLkyvTelC5g8XnyQrpOw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 새로운 명함을 생성합니다. */
  BusinessCardController_createBusinessCard: {
    parameters: {};
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateBusinessCardDto"];
      };
    };
  };
  /** uri에 해당하는 명함을 조회합니다. */
  BusinessCardController_getBusinessCardByUri: {
    parameters: {
      path: {
        businessCardUri: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["BusinessCard$mZFLkyvTelC5g8XnyQrpOw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 유저의 uri에 해당하는 명함을 삭제합니다. */
  BusinessCardController_deleteBusinessCard: {
    parameters: {
      path: {
        businessCardUri: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 유저의 uri에 해당하는 명함을 수정합니다. */
  BusinessCardController_updateBusinessCard: {
    parameters: {
      path: {
        businessCardUri: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateBusinessCardDto"];
      };
    };
  };
  /** 본인이 신청한 경조사 리스트를 조회합니다. */
  EventController_getEventRequestList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort?: "createdAt" | "updatedAt";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        approveStatus?: "pending" | "approved" | "rejected";
        /** 검색어 */
        q?: string;
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$Event$2F9pRg9eqpH6BKi3qrJTtg"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 새로운 경조사 등록을 요청합니다. 관리자가 승인하면 경조사와 관련된 멤버들에게 알림이 가고, 경조사 리스트에 추가됩니다. */
  EventController_requestRegisterEvent: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEventDto"];
      };
    };
  };
  /** eventId에 해당하는 본인의 경조사 등록 신청 정보를 조회합니다. */
  EventController_getEventRequest: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        eventId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Event$2F9pRg9eqpH6BKi3qrJTtg"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 맘모스를 통해 관리되고 있는 경조사 리스트를 가져옵니다. */
  AdminEventController_getEventRequestList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort?: "createdAt" | "updatedAt";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        approveStatus?: "pending" | "approved" | "rejected";
        /** 검색어 */
        q?: string;
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$Event$XVVAi-yfwQ5XUBu7jTmzrQ"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** eventId에 해당하는 경조사 등록 신청 정보를 조회합니다. */
  AdminEventController_getEventRequest: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        eventId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Event$XVVAi-yfwQ5XUBu7jTmzrQ"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /**
   * 경조사를 승인합니다.
   * 승인된 경조사는 경조사 리스트에 추가되고, 경조사와 관련된 멤버들에게 승인 알림이 가게 됩니다.
   */
  AdminEventController_approveEvent: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        eventId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AdminApproveEventDto"];
      };
    };
  };
  FileController_uploadPublicFile: {
    parameters: {};
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
  };
  FileController_uploadUserFile: {
    parameters: {};
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
  };
  FileController_uploadGroupFile: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
  };
  FileController_downloadPublicFile: {
    parameters: {
      path: {
        fileUuid: string;
      };
      query: {
        /** 변환된 파일을 받을지 여부 */
        converted?: boolean;
        /** 파일을 다운받을지 미리볼지 여부 */
        preview: boolean;
      };
    };
    responses: {
      200: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  FileController_downloadUserFile: {
    parameters: {
      path: {
        fileUuid: string;
      };
      query: {
        /** 변환된 파일을 받을지 여부 */
        converted?: boolean;
        /** 파일을 다운받을지 미리볼지 여부 */
        preview: boolean;
      };
    };
    responses: {
      200: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  FileController_downloadGroupFile: {
    parameters: {
      path: {
        fileUuid: string;
      };
      query: {
        /** 변환된 파일을 받을지 여부 */
        converted?: boolean;
        /** 파일을 다운받을지 미리볼지 여부 */
        preview: boolean;
      };
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      200: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 자신이 관리자로 속한 그룹 리스트를 가져옵니다. */
  GroupController_getGroupList: {
    parameters: {
      query: {
        /** 정렬 기준 */
        sort?: "createdAt" | "updatedAt";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        /** 이름 또는 도메인으로 검색 */
        q?: string;
        /**
         * 관리자로 속한 그룹만 가져올건지 여부
         * true: 관리자로 속한 그룹만 가져옴
         * false | undefined: 관리자로 속한 그룹과 그룹에 속한 계정으로 속한 그룹 모두 가져옴
         */
        admin?: boolean;
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$Group$mZFLkyvTelC5g8XnyQrpOw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 자신이 관리자인 그룹을 하나 생성합니다. */
  GroupController_createGroup: {
    parameters: {};
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateGroupDto"];
      };
    };
  };
  /** groupId에 해당하는 그룹의 정보를 가져옵니다. */
  GroupController_getGroup: {
    parameters: {
      path: {
        groupId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Group$mZFLkyvTelC5g8XnyQrpOw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** groupId에 해당하는 그룹을 삭제합니다. */
  GroupController_removeGroup: {
    parameters: {
      path: {
        groupId: number;
      };
    };
    responses: {
      200: unknown;
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** groupId에 해당하는 그룹의 정보를 수정합니다. */
  GroupController_updateGroup: {
    parameters: {
      path: {
        groupId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateGroupDto"];
      };
    };
  };
  /** 그룹 배너 리스트를 가져옵니다. */
  GroupBannerController_getGroupBannerList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupBanner$KYn23EnQvRAfAL0lTTpJGw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /**
   * 회원 리스트를 가져옵니다.
   * 맘모스에 로그인한 적 없는 노무사 회원은 검색이 불가능합니다.
   */
  GroupMemberController_getGroupMemberList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort?: "createdAt" | "updatedAt";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        /** 검색어 */
        q?: string;
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$GroupMember$--k8TVEdxcxP8YRvCJm06g"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 그룹의 본인 멤버 상세 정보를 가져옵니다. */
  GroupMemberController_getMyGroupMember: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupMember$hpumE_UrjujD3-1eeNgw9Q"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 회원 상세 정보를 가져옵니다. 맘모스에 로그인한 적 없는 회원은 검색이 불가능합니다. 맘모스에 로그인한 적 없는 노무사 회원을 찾고 싶다면 /api/v1/kcplaa/members/:kcplaaMemberId 를 사용하세요. */
  GroupMemberController_getGroupMember: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        groupMemberId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupMember$--k8TVEdxcxP8YRvCJm06g"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 그룹 배너 리스트를 가져옵니다. */
  AdminGroupBannerController_getGroupBannerList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort?: "createdAt" | "updatedAt" | "startAt" | "endAt";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        /** 배너 노출 여부 */
        visible?: boolean;
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$GroupBanner$mZFLkyvTelC5g8XnyQrpOw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 그룹 배너를 생성합니다. */
  AdminGroupBannerController_createGroupBanner: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateGroupBannerDto"];
      };
    };
  };
  /** groupBannerId에 해당하는 그룹 배너를 가져옵니다. */
  AdminGroupBannerController_getGroupBanner: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        groupBannerId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupBanner$mZFLkyvTelC5g8XnyQrpOw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** groupBannerId에 해당하는 그룹 배너를 삭제합니다. */
  AdminGroupBannerController_deleteGroupBanner: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        groupBannerId: number;
      };
    };
    responses: {
      200: unknown;
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** groupBannerId에 해당하는 그룹 배너를 수정합니다. */
  AdminGroupBannerController_updateGroupBanner: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        groupBannerId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateGroupBannerDto"];
      };
    };
  };
  /** 모든 그룹 멤버 리스트를 가져옵니다. */
  AdminGroupMemberController_getGroupMemberList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort?: "createdAt" | "updatedAt";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        /**
         * #### 검색어
         *       - '홍길 김철': '홍길' 또는 '김철'를 포함하는 이름을 가진 회원
         *       - '홍길 -동': '홍길'을 포함하고 '동'을 포함하지 않는 이름을 가진 회원
         *       - 'id:3': id가 3인 회원
         *       - 'id:3 id:4': id가 3 또는 4인 회원
         *       - '-id:4': id가 4가 아닌 회원
         */
        q?: string;
        /** 그룹 멤버의 타입 */
        type: "organization" | "association";
        /**
         * #### 가져올 필드 목록
         * - 'user/id': user 테이블의 id만, user/id 이외의 모든 필드는 제외
         * - 'user/*': user 테이블의 모든 필드
         * - 'user/*,user/-id': user 테이블의 모든 필드 중 id를 제외
         * - 'roles/name,roles/permissions/name': roles.name과 roles.permissions.name만
         */
        fields?: string;
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$GroupMember$ibzP2MEdd82eZLNY-2zkUQ"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** groupMemberId에 해당하는 그룹 멤버를 가져옵니다. */
  AdminGroupMemberController_getGroupMember: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        groupMemberId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupMember$ibzP2MEdd82eZLNY-2zkUQ"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** groupMemberId에 해당하는 그룹 멤버를 추방합니다. */
  AdminGroupMemberController_deleteGroupMember: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        groupMemberId: number;
      };
    };
    responses: {
      200: unknown;
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** groupMemberId에 해당하는 그룹 멤버를 수정합니다. */
  AdminGroupMemberController_updateGroupMember: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        groupMemberId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateGroupOrganizationMemberDto"];
      };
    };
  };
  /** groupMemberId에 해당하는 그룹 멤버에게 역할을 추가합니다. */
  AdminGroupMemberController_addRolesToGroupMember: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        groupMemberId: number;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** groupMemberId에 해당하는 그룹 멤버에게서 roleIds에 해당하는 역할들을 제거합니다. */
  AdminGroupMemberController_removeRolesFromGroupMember: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        groupMemberId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** groupMemberId에 해당하는 그룹 멤버에게서 roleId에 해당하는 역할을 제거합니다. */
  AdminGroupMemberController_removeRoleFromGroupMember: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        groupMemberId: number;
        roleId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 그룹의 역할 리스트를 가져옵니다. */
  AdminGroupRoleController_getGroupRoleList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort?: "createdAt" | "updatedAt";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        /** 검색어 */
        q?: string;
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$GroupRole$l332XqYp873s5b6FWQXPSA"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 그룹에 새로운 역할을 추가합니다. */
  AdminGroupRoleController_addGroupRole: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateGroupRoleDto"];
      };
    };
  };
  /** roleId에 해당하는 그룹의 역할을 가져옵니다. */
  AdminGroupRoleController_getGroupRole: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        roleId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupRole$l332XqYp873s5b6FWQXPSA"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** roleId에 해당하는 그룹의 역할을 삭제합니다. 기본 역할은 삭제할 수 없습니다. */
  AdminGroupRoleController_removeGroupRole: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        roleId: number;
      };
    };
    responses: {
      200: unknown;
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** roleId에 해당하는 그룹의 역할을 수정합니다. 기본 역할은 수정할 수 없습니다. 자신이 가진 권한만을 부여할 수 있습니다. */
  AdminGroupRoleController_updateGroupRole: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        roleId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateGroupRoleDto"];
      };
    };
  };
  /** roleId에 해당하는 그룹의 역할에 권한을 추가합니다. */
  AdminGroupRoleController_addPermissionsToGroupRole: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        roleId: number;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddGroupRolePermissionDto"];
      };
    };
  };
  /** roleId에 해당하는 그룹의 역할에 권한을 제거합니다. */
  AdminGroupRoleController_deletePermissionsFromGroupRole: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        roleId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RemoveGroupRolePermissionDto"];
      };
    };
  };
  /** 그룹의 직위 리스트를 가져옵니다. */
  AdminGroupPositionController_getGroupPositionList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort?: "createdAt" | "updatedAt";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        /** 검색어 */
        q?: string;
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$GroupPosition$mZFLkyvTelC5g8XnyQrpOw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 그룹에 새로운 직위를 추가합니다. */
  AdminGroupPositionController_addGroupPosition: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateGroupPositionDto"];
      };
    };
  };
  /** positionId에 해당하는 그룹의 직위를 가져옵니다. */
  AdminGroupPositionController_getGroupPosition: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        positionId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupPosition$mZFLkyvTelC5g8XnyQrpOw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** positionId에 해당하는 그룹의 직위를 삭제합니다. 기본 직위는 삭제할 수 없습니다. */
  AdminGroupPositionController_removeGroupPosition: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        positionId: number;
      };
    };
    responses: {
      200: unknown;
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** positionId에 해당하는 그룹의 직위를 수정합니다. 기본 직위는 수정할 수 없습니다. */
  AdminGroupPositionController_updateGroupPosition: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        positionId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateGroupPositionDto"];
      };
    };
  };
  /** 그룹의 조직 리스트를 가져옵니다. */
  AdminOrganizationTeamController_getOrganizationTeamList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort: "rank";
        /** 정렬 방향 */
        dir: "asc" | "desc";
        /** 검색어 */
        q?: string;
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$GroupTeam$3v0y0DsS7WhHYRVd62tf0Q"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 그룹에 새로운 조직을 추가합니다. */
  AdminOrganizationTeamController_addOrganizationTeam: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOrganizationTeamDto"];
      };
    };
  };
  /** teamId에 해당하는 그룹의 조직을 가져옵니다. */
  AdminOrganizationTeamController_getOrganizationTeam: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        teamId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupTeam$DnIbOsRmhaLh37gBU9m5BA"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /**
   * teamId에 해당하는 그룹의 조직을 삭제합니다. 기본 조직은 삭제할 수 없습니다.
   *  하위 조직들은 부모 조직에 속하게 됩니다.
   */
  AdminOrganizationTeamController_removeOrganizationTeam: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        teamId: number;
      };
    };
    responses: {
      200: unknown;
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** teamId에 해당하는 그룹의 조직을 수정합니다. 기본 조직은 수정할 수 없습니다. */
  AdminOrganizationTeamController_updateOrganizationTeam: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        teamId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateOrganizationTeamDto"];
      };
    };
  };
  /** teamId에 해당하는 조직에 멤버를 추가합니다. */
  AdminOrganizationTeamMemberController_addGroupTeamMember: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        teamId: number;
      };
    };
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddMembersToOrganizationTeamDto"];
      };
    };
  };
  /** teamId에 해당하는 조직에서 멤버를 제거합니다. */
  AdminOrganizationTeamMemberController_removeGroupTeamMember: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        teamId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RemoveMembersFromTeamDto"];
      };
    };
  };
  /** 그룹 구성원을 등록합니다. 새 계정을 생성하고, 해당 계정을 그룹 구성원으로 등록합니다. */
  AdminGroupOrganizationMemberController_createOrganizationMember: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateGroupOrganizationMemberResponse"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateGroupOrganizationMemberDto"];
      };
    };
  };
  /** 그룹 구성원을 일괄 등록합니다. 새 계정을 생성하고, 해당 계정을 그룹 구성원으로 등록합니다. */
  AdminGroupOrganizationMemberController_bulkCreateOrganizationMember: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["BulkCreateGroupOrganizationMemberResponse"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BulkCreateGroupOrganizationMemberDto"];
      };
    };
  };
  /** 그룹의 회원 그룹 리스트를 가져옵니다. */
  AdminAssociationTeamController_getAssociationTeamList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort?: "createdAt" | "updatedAt";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        /** 검색어 */
        q?: string;
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$GroupTeam$bAWYL_-5OVRyU0WyEV3CXQ"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 그룹에 새로운 회원 그룹을 추가합니다. */
  AdminAssociationTeamController_addAssociationTeam: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAssociationTeamDto"];
      };
    };
  };
  /** teamId에 해당하는 그룹의 회원 그룹을 가져옵니다. */
  AdminAssociationTeamController_getAssociationTeam: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        teamId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupTeam$Pwfmxii4q5NdRDYj9WD7Qw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** teamId에 해당하는 그룹의 회원 그룹을 삭제합니다. 기본 회원 그룹은 삭제할 수 없습니다. */
  AdminAssociationTeamController_removeAssociationTeam: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        teamId: number;
      };
    };
    responses: {
      200: unknown;
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** teamId에 해당하는 그룹의 회원 그룹을 수정합니다. 기본 회원 그룹은 수정할 수 없습니다. */
  AdminAssociationTeamController_updateAssociationTeam: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        teamId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateAssociationTeamDto"];
      };
    };
  };
  /** teamId에 해당하는 회원 그룹에 멤버를 추가합니다. */
  AdminAssociationTeamMemberController_addGroupTeamMember: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        teamId: number;
      };
    };
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddMembersToAssociationTeamDto"];
      };
    };
  };
  /** teamId에 해당하는 회원 그룹에서 멤버를 제거합니다. */
  AdminAssociationTeamMemberController_removeGroupTeamMember: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        teamId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RemoveMembersFromTeamDto"];
      };
    };
  };
  /** 그룹에 새로운 회원을 등록합니다. */
  AdminGroupAssociationMemberController_createAssociationMember: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateGroupAssociationMemberDto"];
      };
    };
  };
  /** 한번에 여러 회원을 추가합니다. */
  AdminGroupAssociationMemberController_bulkCreateAssociationMember: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BulkCreateAssociationGroupMemberDto"];
      };
    };
  };
  IndexController_healthCheck: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
      500: unknown;
    };
  };
  /** 노무사 회원 인명록에서 내 정보 검색 허용 여부를 설정합니다. 노무사 회원만 이용 가능합니다. */
  KcplaaMemberController_setSearchable: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateKcplaaMemberSearchableDto"];
      };
    };
  };
  /** 본인의 노무사 회원 정보를 동기화합니다. 기본적으로는 매일 새벽 2시마다 동기화됩니다. 노무사 회원만 이용 가능합니다. */
  KcplaaMemberController_syncKcplaaMemberData: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      200: unknown;
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /**
   * 내 정보 검색 허용으로 설정된 노무사 리스트를 가져옵니다.
   * 맘모스를 사용하지 않은 노무사는 검색 허용으로 취급됩니다.
   * 이름을 기준으로 검색합니다.
   */
  KcplaaMemberController_getKcplaaMemberList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort?: "name";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        /** 검색할 컬럼 */
        property:
          | "name"
          | "phone"
          | "licenseCb"
          | "officeName"
          | "officeAddress";
        /** true면 검색 허용으로 설정된 멤버만 가져옴 */
        searchable?: boolean;
        /** 검색어 */
        q?: string;
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$KcplaaCsMemberView$mZFLkyvTelC5g8XnyQrpOw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 노무사 자격증번호(licenseNo)에 해당하는 노무사의 상세 정보를 조회합니다. */
  KcplaaMemberController_getKcplaaMemberDetail: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        licenseNo: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["KcplaaCsMemberView$mZFLkyvTelC5g8XnyQrpOw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 경조사 리스트를 조회합니다. */
  KcplaaEventController_getEventList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 년도별 경조사 목록을 가져올 때 사용. */
        year: number;
        /** 월별 경조사. 없으면 해당 년도의 모든 경조사들을 가져옵니다. */
        month?: number;
        /** 일별 경조사. month가 없으면 잘못된 입력으로 간주합니다. 없으면 해당 년도의 모든 경조사들을 가져옵니다. */
        day?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["KcplaaEvent$Lhkz8RKRbSF25DN1lVppBg"][];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 노무사회에 등록된 경조사를 조회합니다. */
  KcplaaEventController_getEvent: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        kcplaaEventId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["KcplaaEvent$Lhkz8RKRbSF25DN1lVppBg"][];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /**
   * 노무사 리스트를 가져옵니다.
   * 맘모스를 사용하지 않은 노무사는 검색 허용으로 취급됩니다.
   * 검색어가 있다면 이름을 기준으로 검색합니다.
   */
  AdminKcplaaMemberController_getKcplaaMemberList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort?: "name";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        /** 검색어 */
        q?: string;
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$KcplaaMember$n1qL2LgK1wWloKVbny6I_Q"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 노무사 전체 회원 정보를 동기화합니다. 기본적으로는 매일 새벽 2시마다 동기화됩니다. */
  AdminKcplaaMemberController_refreshKcplaaData: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      200: unknown;
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** kcplaaMemberId에 해당하는 노무사 회원 정보를 동기화합니다. 기본적으로는 매일 새벽 2시마다 동기화됩니다. */
  AdminKcplaaMemberController_refreshKcplaaMemberData: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        kcplaaMemberId: number;
      };
    };
    responses: {
      200: unknown;
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 자신에게 발송된 공지사항 리스트를 가져옵니다. */
  NoticeController_getNoticeList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort?: "createdAt" | "updatedAt";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        /**
         * 공지사항 읽음 여부
         * - undefined: 읽음 여부와 상관 없이 전부 가져옴
         * - true: 읽지 않은 공지만 가져옴
         * - false: 읽은 공지만 가져옴
         */
        unread?: boolean;
        /** 공지사항의 카테고리 id */
        categoryId?: number;
        /** 검색어 */
        q?: string;
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$Notice$pkGxn-Ue16GEkSQIRshWGA"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /**
   * noticeId에 해당하는 공지사항 상세 정보를 가져옵니다.
   * 공지사항이 아직 안읽음 상태라면 읽음 상태로 변경됩니다.
   */
  NoticeController_getNoticeDetail: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        noticeId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Notice$zzcF6it_mqOZysvuAGUQqw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /**
   * noticeId에 해당하는 공지사항을 안읽음 상태로 설정합니다.
   * 이미 안읽음 상태라면 아무런 동작도 하지 않습니다.
   */
  NoticeController_deleteNoticeReadStatus: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        noticeId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 그룹의 공지사항 카테고리 리스트를 가져옵니다. */
  AdminNoticeCategoryController_getNoticeCategoryList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort?: "createdAt" | "updatedAt";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        /** 검색어 */
        q?: string;
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$NoticeCategory$mZFLkyvTelC5g8XnyQrpOw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 새로운 공지사항 카테고리를 생성합니다. */
  AdminNoticeCategoryController_createNoticeCategory: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateNoticeCategoryDto"];
      };
    };
  };
  /** noticeCategoryId에 해당하는 공지사항 카테고리 상세 정보를 가져옵니다. */
  AdminNoticeCategoryController_getNoticeCategory: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        noticeCategoryId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["NoticeCategory$i1oG3OeSZXeUZ6tZ9jV4bQ"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** noticeCategoryId에 해당하는 공지사항 카테고리를 삭제합니다. */
  AdminNoticeCategoryController_deleteNoticeCategory: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        noticeCategoryId: number;
      };
    };
    responses: {
      200: unknown;
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 그룹의 공지사항 리스트를 가져옵니다. */
  AdminNoticeController_getNoticeList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort?: "createdAt" | "updatedAt";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        /** 공지사항의 카테고리 id */
        categoryId?: number;
        /** 검색어 */
        q?: string;
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$Notice$Cbwe92YYn1sQ4w7UU6OECg"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 새로운 공지사항을 생성합니다. */
  AdminNoticeController_createNotice: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateNoticeDto"];
      };
    };
  };
  /** noticeId에 해당하는 공지사항 상세 정보를 가져옵니다. */
  AdminNoticeController_getNotice: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        noticeId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Notice$Cbwe92YYn1sQ4w7UU6OECg"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** noticeId에 해당하는 공지사항을 삭제합니다. 삭제된 공지사항은 복구할 수 없습니다. */
  AdminNoticeController_deleteNotice: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        noticeId: number;
      };
    };
    responses: {
      200: unknown;
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** noticeId에 해당하는 공지사항을 수정합니다. */
  AdminNoticeController_updateNotice: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        noticeId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateNoticeDto"];
      };
    };
  };
  /** 푸시 알림 카테고리 리스트를 가져옵니다. */
  NotificationCategoryController_getNotificationCategoryList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["NotificationCategory$NI5HzFgKUWkFnsQXSUkeBg"][];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 특정 푸시 알림 카테고리의 수신 여부를 설정합니다. */
  NotificationCategoryController_blockNotificationCategory: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        categoryId: number;
      };
    };
    responses: {
      201: unknown;
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BlockNotificationDto"];
      };
    };
  };
  /** 자신에게 발송된 푸시 알림 리스트를 가져옵니다. */
  NotificationController_getNotificationList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort?: "createdAt" | "updatedAt";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        /** 알림 카테고리 id */
        categoryId?: number;
        /** 알림 카테고리 종류. system: 앱 알림, 카테고리 추가/수정/삭제가 불가능함, user: 관리자가 보내는 알림. 카테고리가 추가되거나 비활성화될 수 있음 */
        type?: "system" | "user";
        /** 시스템 알림 이름. `type !== 'system'` 이라면 무시됨. 있으면 해당하는 알림메시지만 가져오고, 없다면 모든 시스템 알림메시지를 가져옴 */
        systemCategoryName?: "event";
        /** 검색어 */
        q?: string;
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$Notification$Z9ANZn1E5egnIvqE7fOY3Q"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** notificationId에 해당하는 푸시 알림 상세 정보를 가져옵니다. */
  NotificationController_getNotificationDetail: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        notificationId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Notification$pKSBV_Qn5s1bLpiU0YwG0Q"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 그룹의 푸시 알림 카테고리 리스트를 가져옵니다. */
  AdminNotificationCategoryController_getNotificationCategoryList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 알림 카테고리 사용 여부, true이면 일반 사용자들에게 수신 여부 토글 버튼이 노출되지 않음 */
        unused?: boolean;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["NotificationCategory"][];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 그룹에 새로운 푸시 알림 카테고리를 생성합니다. */
  AdminNotificationCategoryController_createNotificationCategory: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateNotificationCategoryDto"];
      };
    };
  };
  /**
   * 그룹의 푸시 알림 카테고리를 수정합니다.
   * unused가 true면 해당 카테고리가 더 이상 일반 사용자들에게 보이지 않습니다.
   */
  AdminNotificationCategoryController_updateNotificationCategory: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        categoryId: number;
      };
    };
    responses: {
      200: unknown;
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateNotificationCategoryDto"];
      };
    };
  };
  /**
   * 그룹에서 발송된 푸시 알림 리스트를 가져옵니다.
   * 관리자 api는 일반 사용자 api에 발송 결과가 추가로 포함됩니다.
   */
  AdminNotificationController_getNotificationList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort?: "createdAt" | "updatedAt";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        /** 알림 카테고리 id */
        categoryId?: number;
        /** 알림 카테고리 종류. system: 앱 알림, 카테고리 추가/수정/삭제가 불가능함, user: 관리자가 보내는 알림. 카테고리가 추가되거나 비활성화될 수 있음 */
        type?: "system" | "user";
        /** 시스템 알림 이름. `type !== 'system'` 이라면 무시됨. 있으면 해당하는 알림메시지만 가져오고, 없다면 모든 시스템 알림메시지를 가져옴 */
        systemCategoryName?: "event";
        /** 검색어 */
        q?: string;
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$Notification$TJE48aJZdLstGzOQ-ySFdA"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 푸시 알림을 발송합니다. 발송 현황은 15분 이후 자동으로 갱신되며, 수동으로 갱신시 발송 현황이 완전히 반영되기까지는 최대 15분 정도 소요될 수 있습니다. */
  AdminNotificationController_sendNotification: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateNotificationDtoV1"];
      };
    };
  };
  /** 푸시 알림을 발송합니다. 발송 현황은 15분 이후 자동으로 갱신되며, 수동으로 갱신시 발송 현황이 완전히 반영되기까지는 최대 15분 정도 소요될 수 있습니다. */
  AdminNotificationController_sendNotificationV2: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateNotificationDtoV2"];
      };
    };
  };
  /** 푸시 알림의 상세 내용, 발송 현황 등을 가져옵니다. 기본적으로는 발송 현황을 새로고침하지 않습니다. */
  AdminNotificationController_getNotification: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        notificationId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Notification$TJE48aJZdLstGzOQ-ySFdA"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 푸시 알림의 발송 현황을 새로고침합니다. */
  AdminNotificationController_refreshPushResults: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        notificationId: number;
      };
    };
    responses: {
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** surveyId에 해당하는 설문에 제출한 응답들을 가져옵니다. */
  SurveyResponseController_getSurveyResponseList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        surveyId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$SurveyResponse$9OFYQQf-2fNB86T2wJAh1A"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** surveyId에 해당하는 설문의 응답을 제출합니다. */
  SurveyResponseController_responseToSurvey: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        surveyId: number;
      };
    };
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSurveyResponseDto"];
      };
    };
  };
  /** surveyId에 해당하는 설문에서 내가 작성한 responseId에 해당하는 응답을 가져옵니다. */
  SurveyResponseController_getSurveyResponse: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        surveyId: number;
        responseId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SurveyResponse$9OFYQQf-2fNB86T2wJAh1A"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** surveyId에 해당하는 설문에서 내가 작성한 responseId에 해당하는 응답을 수정합니다. */
  SurveyResponseController_updateSurveyResponse: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        surveyId: number;
        responseId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSurveyResponseDto"];
      };
    };
  };
  /** 조회 가능한 설문 리스트를 가져옵니다 */
  SurveyController_getSurveyList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort?: "createdAt" | "updatedAt";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        /**
         * 제출 가능한 설문인지 여부.
         * 종료되었는데 제출 가능한 설문은 없기 때문에 finished가 true면 무시됨.
         */
        submittable?: boolean;
        /** 종료된 설문인지 여부 */
        finished?: boolean;
        /** 검색어 */
        q?: string;
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$Survey$VMXjPDjGpWvMFjHX2MHdlQ"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** surveyId에 해당하는 설문의 상세정보를 가져옵니다. */
  SurveyController_getSurvey: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        surveyId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Survey$ZiKKqHygCA1h2FWWVkhrkw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** surveyId에 해당하는 설문에 제출한 응답들을 가져옵니다. */
  AdminSurveyResponseController_getSurveyResponseList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        surveyId: number;
      };
      query: {
        /** 정렬 기준 */
        sort?: "createdAt" | "updatedAt";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$SurveyResponse$9OFYQQf-2fNB86T2wJAh1A"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** surveyId에 해당하는 설문에서 responseId에 해당하는 응답을 가져옵니다. */
  AdminSurveyResponseController_getSurveyResponse: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        surveyId: number;
        responseId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SurveyResponse$9OFYQQf-2fNB86T2wJAh1A"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 그룹 내에서 조건에 맞는 설문 리스트를 가져옵니다. */
  AdminSurveyController_getSurveyList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort?: "createdAt" | "updatedAt";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
        /** 종료된 설문인지 여부 */
        finished?: boolean;
        /** 검색어 */
        q?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$Survey$h9t27cjaT6UA-eivxAOfCQ"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 새로운 설문을 생성합니다. */
  AdminSurveyController_createSurvey: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSurveyDto"];
      };
    };
  };
  /** surveyIds에 해당하는 설문을 삭제합니다. 삭제한 설문은 복구할 수 없습니다. */
  AdminSurveyController_bulkDeleteSurvey: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      200: unknown;
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BulkDeleteSurveyDto"];
      };
    };
  };
  /** surveyId에 해당하는 설문의 상세정보를 가져옵니다. */
  AdminSurveyController_getSurvey: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        surveyId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Survey$XTLPmAfq-V39AwN2J_RyWw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** surveyId에 해당하는 설문을 수정합니다. 설문 문항 수정은 불가능합니다. */
  AdminSurveyController_updateSurvey: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        surveyId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSurveyDto"];
      };
    };
  };
  /** surveyId에 해당하는 설문의 통계를 가져옵니다. */
  AdminSurveyController_getSurveyStatistics: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        surveyId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Survey$s52ViJRMZP0c606z2ri2aQ"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** surveyId에 해당하는 설문에 문항을 추가합니다. */
  AdminSurveyController_addQuestion: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        surveyId: number;
      };
    };
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSurveyQuestionDto"];
      };
    };
  };
  /** surveyId에 해당하는 설문의 문항별 통계를 가져옵니다. */
  AdminSurveyController_getSurveyQuestionStatistics: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        surveyId: number;
        questionId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": string[];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** surveyId에 해당하는 설문에서 questionId에 해당하는 문항을 삭제합니다. 문항을 삭제해도 해당 문항에 대한 설문 응답은 삭제되지 않습니다. */
  AdminSurveyController_deleteQuestion: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        surveyId: number;
        questionId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** surveyId에 해당하는 설문에서 questionId에 해당하는 문항을 수정합니다. */
  AdminSurveyController_updateQuestion: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        surveyId: number;
        questionId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSurveyQuestionDto"];
      };
    };
  };
  /** uuid에 해당하는 디바이스의 정보를 수정합니다. */
  DeviceController_update: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    responses: {
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateDeviceDto"];
      };
    };
  };
  /** 자신의 정보를 가져옵니다. */
  UserController_getMe: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User$jNKBlzC61snIVfR8ioXwhA"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 자신의 정보를 수정합니다. */
  UserController_updateMe: {
    parameters: {};
    responses: {
      200: unknown;
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserMeDto"];
      };
    };
  };
  /** id에 해당하는 로그인 아이디를 가진 유저가 존재하는지 확인합니다. kcplaaMember property가 있으면 노무사 회원입니다. */
  PublicUserController_checkUserExist: {
    parameters: {
      query: {
        /** 로그인시 사용되는 유저 id */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User$tFI6qC0I7aqSExPPskaLJA"];
        };
      };
    };
  };
  /** 조회 가능한 동영상 게시글 리스트를 가져옵니다. */
  VideoPostController_getVideoPostList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort?: "createdAt" | "updatedAt";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
        /** 검색어 */
        q?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$VideoPost$KYn23EnQvRAfAL0lTTpJGw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** videoPostId에 해당하는 동영상 게시글의 상세정보를 가져옵니다. */
  VideoPostController_getVideoPost: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        videoPostId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["VideoPost$KYn23EnQvRAfAL0lTTpJGw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 조회 가능한 동영상 게시글 리스트를 가져옵니다. */
  AdminVideoPostController_getVideoPostList: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      query: {
        /** 정렬 기준 */
        sort?: "createdAt" | "updatedAt";
        /** 정렬 방향 */
        dir?: "asc" | "desc";
        /** 페이지 번호 */
        page: number;
        /** 페이지당 개수 */
        limit: number;
        /** 공개 여부 */
        visible?: boolean;
        /** 검색어 */
        q?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["List$VideoPost$mZFLkyvTelC5g8XnyQrpOw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** 새로운 동영상 게시글을 등록합니다 */
  AdminVideoPostController_createVideoPost: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      201: unknown;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateVideoPostDto"];
      };
    };
  };
  /** videoPostIds에 해당하는 동영상 게시글들을 삭제합니다. */
  AdminVideoPostController_bulkDeleteVideoPost: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
    };
    responses: {
      200: unknown;
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BulkDeleteVideoPostDto"];
      };
    };
  };
  /** videoPostId에 해당하는 동영상 게시글의 상세정보를 가져옵니다. */
  AdminVideoPostController_getVideoPost: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        videoPostId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["VideoPost$mZFLkyvTelC5g8XnyQrpOw"];
        };
      };
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** videoPostId에 해당하는 동영상 게시글을 삭제합니다. */
  AdminVideoPostController_deleteVideoPost: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        videoPostId: number;
      };
    };
    responses: {
      200: unknown;
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
  };
  /** videoPostId에 해당하는 동영상 게시글을 수정합니다. */
  AdminVideoPostController_updateVideoPost: {
    parameters: {
      header: {
        /** 그룹 ID 헤더 */
        "x-group-id": string;
      };
      path: {
        videoPostId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": number;
        };
      };
      204: never;
      /** 토큰이 없거나 잘못되었을 때 */
      401: unknown;
      /** 토큰은 정상적이나 리소스에 접근할 권한이 부족하면 forbidden 대신 not found가 반환됨 */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateVideoPostDto"];
      };
    };
  };
}

export interface external {}
